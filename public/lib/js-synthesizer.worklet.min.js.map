{"version":3,"file":"js-synthesizer.worklet.min.js","mappings":"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","sources":["webpack://js-synthesizer/./src/main/WasmManager.ts","webpack://js-synthesizer/./src/main/MIDIEvent.ts","webpack://js-synthesizer/./src/main/SequencerEventData.ts","webpack://js-synthesizer/./src/main/PointerType.ts","webpack://js-synthesizer/./src/main/ISequencerEventData.ts","webpack://js-synthesizer/./src/main/Sequencer.ts","webpack://js-synthesizer/./src/main/Soundfont.ts","webpack://js-synthesizer/./src/main/logging.ts","webpack://js-synthesizer/./src/main/Synthesizer.ts","webpack://js-synthesizer/./src/main/MessageError.ts","webpack://js-synthesizer/./src/main/MethodMessaging.ts","webpack://js-synthesizer/./src/main/registerAudioWorkletProcessor.ts","webpack://js-synthesizer/./src/main/waitForReady.ts","webpack://js-synthesizer/./src/main/workletEntry.ts"],"sourcesContent":["import type { MIDIEventType } from './MIDIEvent';\nimport PointerType, { UniquePointerType } from './PointerType';\n\n// @internal\ndeclare global {\n\tvar Module: any;\n\tfunction addFunction(func: Function, sig: string): number;\n\tfunction removeFunction(funcPtr: number): void;\n\tfunction addOnPostRun(cb: (Module: any) => void): void;\n}\n\n// @internal\nexport type SettingsId = UniquePointerType<\"settings_id\">;\n// @internal\nexport type SynthId = UniquePointerType<\"synth_id\">;\n// @internal\nexport type PlayerId = UniquePointerType<\"player_id\">;\n\n// @internal\nexport let _module: any;\n// @internal\nexport let _addFunction: (func: Function, sig: string) => number;\n// @internal\nexport let _removeFunction: (funcPtr: number) => void;\n// @internal\nexport let _fs: any;\nlet _addOnPostRunFn: ((cb: (Module: any) => void) => void) | undefined;\n\n// @internal\nexport let fluid_settings_setint: (settings: SettingsId, name: string, val: number) => number;\n// @internal\nexport let fluid_settings_setnum: (settings: SettingsId, name: string, val: number) => number;\n// @internal\nexport let fluid_settings_setstr: (settings: SettingsId, name: string, str: string) => number;\n// @internal\nexport let fluid_synth_error: undefined | ((synth: SynthId) => string);\n// @internal\nexport let fluid_synth_sfload: (synth: SynthId, filename: string, reset_presets: number) => number;\n// @internal\nexport let fluid_sequencer_register_client: (seq: PointerType, name: string, callback: number, data: number) => number;\n\n// @internal\nexport let malloc: (size: number) => PointerType;\n// @internal\nexport let free: (ptr: PointerType) => void;\n\n// @internal\nexport let defaultMIDIEventCallback: (data: PointerType, event: MIDIEventType) => number;\n\n// @internal\nexport function bindFunctions(module?: any): void {\n\tif (module == null && fluid_synth_error) {\n\t\t// (already bound)\n\t\treturn;\n\t}\n\n\tif (module != null) {\n\t\tif (!module.addFunction || !module.removeFunction || !module.addOnPostRun) {\n\t\t\tthrow new Error(\"Invalid 'module' object. libfluidsynth-*.js (2.4.6 or higher) must be used.\");\n\t\t}\n\t\t_module = module;\n\t\t_addFunction = _module.addFunction;\n\t\t_removeFunction = _module.removeFunction;\n\t\t_addOnPostRunFn = _module.addOnPostRun;\n\t} else if (typeof AudioWorkletGlobalScope !== \"undefined\") {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t\t_addFunction = _module.addFunction || AudioWorkletGlobalScope.wasmAddFunction;\n\t\t_removeFunction = _module.removeFunction || AudioWorkletGlobalScope.wasmRemoveFunction;\n\t\t_addOnPostRunFn = _module.addOnPostRun || AudioWorkletGlobalScope.addOnPostRun;\n\t} else if (typeof Module !== \"undefined\") {\n\t\t_module = Module;\n\t\tif (_module.addFunction) {\n\t\t\t_addFunction = _module.addFunction;\n\t\t\t_removeFunction = _module.removeFunction;\n\t\t} else {\n\t\t\t_addFunction = addFunction;\n\t\t\t_removeFunction = removeFunction;\n\t\t}\n\t\tif (_module.addOnPostRun) {\n\t\t\t_addOnPostRunFn = _module.addOnPostRun;\n\t\t} else {\n\t\t\t_addOnPostRunFn = typeof addOnPostRun !== \"undefined\" ? addOnPostRun : undefined;\n\t\t}\n\t} else {\n\t\tthrow new Error(\n\t\t\t\"wasm module is not available. libfluidsynth-*.js must be loaded.\"\n\t\t);\n\t}\n\t_fs = _module.FS;\n\n\t// wrapper to use String type\n\tfluid_settings_setint = _module.cwrap(\"fluid_settings_setint\", \"number\", [\n\t\t\"number\",\n\t\t\"string\",\n\t\t\"number\",\n\t]);\n\tfluid_settings_setnum = _module.cwrap(\"fluid_settings_setnum\", \"number\", [\n\t\t\"number\",\n\t\t\"string\",\n\t\t\"number\",\n\t]);\n\tfluid_settings_setstr = _module.cwrap(\"fluid_settings_setstr\", \"number\", [\n\t\t\"number\",\n\t\t\"string\",\n\t\t\"string\",\n\t]);\n\tfluid_synth_error = _module.cwrap(\"fluid_synth_error\", \"string\", [\n\t\t\"number\",\n\t]);\n\tfluid_synth_sfload = _module.cwrap(\"fluid_synth_sfload\", \"number\", [\n\t\t\"number\",\n\t\t\"string\",\n\t\t\"number\",\n\t]);\n\tfluid_sequencer_register_client = _module.cwrap(\n\t\t\"fluid_sequencer_register_client\",\n\t\t\"number\",\n\t\t[\"number\", \"string\", \"number\", \"number\"]\n\t);\n\n\tmalloc = _module._malloc.bind(_module);\n\tfree = _module._free.bind(_module);\n\n\tdefaultMIDIEventCallback =\n\t\t_module._fluid_synth_handle_midi_event.bind(_module);\n}\n\nlet promiseWaitForInitialized: Promise<void> | undefined;\n// @internal\nexport function waitForInitialized(): Promise<void> {\n\tif (promiseWaitForInitialized) {\n\t\treturn promiseWaitForInitialized;\n\t}\n\n\ttry {\n\t\tbindFunctions();\n\t} catch (e: unknown) {\n\t\treturn Promise.reject(e);\n\t}\n\n\tif (_module.calledRun) {\n\t\tpromiseWaitForInitialized = Promise.resolve();\n\t\treturn promiseWaitForInitialized;\n\t}\n\tif (typeof _addOnPostRunFn === 'undefined') {\n\t\tpromiseWaitForInitialized = new Promise((resolve) => {\n\t\t\tconst fn: (() => void) | undefined = _module.onRuntimeInitialized;\n\t\t\t_module.onRuntimeInitialized = () => {\n\t\t\t\tresolve();\n\t\t\t\tif (fn) {\n\t\t\t\t\tfn();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t} else {\n\t\tpromiseWaitForInitialized = new Promise((resolve) => {\n\t\t\t_addOnPostRunFn!(resolve);\n\t\t});\n\t}\n\treturn promiseWaitForInitialized;\n}\n","\nimport IMIDIEvent from './IMIDIEvent';\nimport PointerType, { UniquePointerType } from './PointerType';\n\n/** @internal */\nexport type MIDIEventType = UniquePointerType<'midi_event'>;\n\n/** @internal */\nexport default class MIDIEvent implements IMIDIEvent {\n\n\t/** @internal */\n\tconstructor(private _ptr: MIDIEventType, private _module: any) {\n\t}\n\n\tpublic getType(): number {\n\t\treturn this._module._fluid_midi_event_get_type(this._ptr);\n\t}\n\tpublic setType(value: number): void {\n\t\tthis._module._fluid_midi_event_set_type(this._ptr, value);\n\t}\n\tpublic getChannel(): number {\n\t\treturn this._module._fluid_midi_event_get_channel(this._ptr);\n\t}\n\tpublic setChannel(value: number): void {\n\t\tthis._module._fluid_midi_event_set_channel(this._ptr, value);\n\t}\n\tpublic getKey(): number {\n\t\treturn this._module._fluid_midi_event_get_key(this._ptr);\n\t}\n\tpublic setKey(value: number): void {\n\t\tthis._module._fluid_midi_event_set_key(this._ptr, value);\n\t}\n\tpublic getVelocity(): number {\n\t\treturn this._module._fluid_midi_event_get_velocity(this._ptr);\n\t}\n\tpublic setVelocity(value: number): void {\n\t\tthis._module._fluid_midi_event_set_velocity(this._ptr, value);\n\t}\n\tpublic getControl(): number {\n\t\treturn this._module._fluid_midi_event_get_control(this._ptr);\n\t}\n\tpublic setControl(value: number): void {\n\t\tthis._module._fluid_midi_event_set_control(this._ptr, value);\n\t}\n\tpublic getValue(): number {\n\t\treturn this._module._fluid_midi_event_get_value(this._ptr);\n\t}\n\tpublic setValue(value: number): void {\n\t\tthis._module._fluid_midi_event_set_value(this._ptr, value);\n\t}\n\tpublic getProgram(): number {\n\t\treturn this._module._fluid_midi_event_get_program(this._ptr);\n\t}\n\tpublic setProgram(value: number): void {\n\t\tthis._module._fluid_midi_event_set_program(this._ptr, value);\n\t}\n\tpublic getPitch(): number {\n\t\treturn this._module._fluid_midi_event_get_pitch(this._ptr);\n\t}\n\tpublic setPitch(value: number): void {\n\t\tthis._module._fluid_midi_event_set_pitch(this._ptr, value);\n\t}\n\n\tpublic setSysEx(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_sysex(this._ptr, ptr, size, 1);\n\t}\n\tpublic setText(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_text(this._ptr, ptr, size, 1);\n\t}\n\tpublic setLyrics(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_lyrics(this._ptr, ptr, size, 1);\n\t}\n}\n","\nimport { EventType } from './SequencerEvent';\nimport ISequencerEventData from './ISequencerEventData';\nimport PointerType, { INVALID_POINTER } from './PointerType';\n\n/** @internal */\nexport default class SequencerEventData implements ISequencerEventData {\n\t/** @internal */\n\tconstructor(private _ptr: PointerType, private _module: any) {\n\t}\n\n\t/** @internal */\n\tpublic getRaw() {\n\t\treturn this._ptr;\n\t}\n\n\t/** @internal */\n\tpublic dispose() {\n\t\tthis._ptr = INVALID_POINTER;\n\t}\n\n\tpublic getType(): EventType {\n\t\tif (this._ptr === INVALID_POINTER) return -1 as any as EventType;\n\t\treturn this._module._fluid_event_get_type(this._ptr);\n\t}\n\tpublic getSource(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_source(this._ptr);\n\t}\n\tpublic getDest(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_dest(this._ptr);\n\t}\n\tpublic getChannel(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_channel(this._ptr);\n\t}\n\tpublic getKey(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_key(this._ptr);\n\t}\n\tpublic getVelocity(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_velocity(this._ptr);\n\t}\n\tpublic getControl(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_control(this._ptr);\n\t}\n\tpublic getValue(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_value(this._ptr);\n\t}\n\tpublic getProgram(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_program(this._ptr);\n\t}\n\tpublic getData(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_data(this._ptr);\n\t}\n\tpublic getDuration(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_duration(this._ptr);\n\t}\n\tpublic getBank(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_bank(this._ptr);\n\t}\n\tpublic getPitch(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_pitch(this._ptr);\n\t}\n\tpublic getSFontId(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_sfont_id(this._ptr);\n\t}\n}\n","\ntype NullPointerType = number & { _null_pointer_marker: never; };\n\n/** @internal */\ntype PointerType = NullPointerType | (number & { _pointer_marker: never; });\n\nexport default PointerType;\n\ntype UniquePointerType<TMarker extends string> = NullPointerType | (number & {\n\t_pointer_marker: never;\n} & {\n\t[P in TMarker]: never;\n});\nexport { UniquePointerType };\n\nexport const INVALID_POINTER: NullPointerType = 0 as any as NullPointerType;\n","\nimport SequencerEvent, { EventType } from './SequencerEvent';\nimport { _module } from './WasmManager';\n\n/** @internal */\nimport PointerType, { INVALID_POINTER } from './PointerType';\n/** @internal */\nimport SequencerEventData from './SequencerEventData';\n\n/** Event data for sequencer callback. Only available in the callback function due to the instance lifetime. */\nexport default interface ISequencerEventData {\n\t/** Returns the event type */\n\tgetType(): EventType;\n\t/** Returns the source client id of event */\n\tgetSource(): number;\n\t/** Returns the destination client id of event */\n\tgetDest(): number;\n\tgetChannel(): number;\n\tgetKey(): number;\n\tgetVelocity(): number;\n\tgetControl(): number;\n\tgetValue(): number;\n\tgetProgram(): number;\n\tgetData(): number;\n\tgetDuration(): number;\n\tgetBank(): number;\n\tgetPitch(): number;\n\tgetSFontId(): number;\n}\n\n/** @internal */\nexport function rewriteEventDataImpl(ev: PointerType, event: SequencerEvent): boolean {\n\tswitch (event.type) {\n\t\tcase EventType.Note:\n\t\tcase 'note':\n\t\t\t_module._fluid_event_note(ev, event.channel, event.key, event.vel, event.duration);\n\t\t\tbreak;\n\t\tcase EventType.NoteOn:\n\t\tcase 'noteon':\n\t\tcase 'note-on':\n\t\t\t_module._fluid_event_noteon(ev, event.channel, event.key, event.vel);\n\t\t\tbreak;\n\t\tcase EventType.NoteOff:\n\t\tcase 'noteoff':\n\t\tcase 'note-off':\n\t\t\t_module._fluid_event_noteoff(ev, event.channel, event.key);\n\t\t\tbreak;\n\t\tcase EventType.AllSoundsOff:\n\t\tcase 'allsoundsoff':\n\t\tcase 'all-sounds-off':\n\t\t\t_module._fluid_event_all_sounds_off(ev, event.channel);\n\t\t\tbreak;\n\t\tcase EventType.AllNotesOff:\n\t\tcase 'allnotesoff':\n\t\tcase 'all-notes-off':\n\t\t\t_module._fluid_event_all_notes_off(ev, event.channel);\n\t\t\tbreak;\n\t\tcase EventType.BankSelect:\n\t\tcase 'bankselect':\n\t\tcase 'bank-select':\n\t\t\t_module._fluid_event_bank_select(ev, event.channel, event.bank);\n\t\t\tbreak;\n\t\tcase EventType.ProgramChange:\n\t\tcase 'programchange':\n\t\tcase 'program-change':\n\t\t\t_module._fluid_event_program_change(ev, event.channel, event.preset);\n\t\t\tbreak;\n\t\tcase EventType.ProgramSelect:\n\t\tcase 'programselect':\n\t\tcase 'program-select':\n\t\t\t_module._fluid_event_program_select(ev, event.channel, event.sfontId, event.bank, event.preset);\n\t\t\tbreak;\n\t\tcase EventType.ControlChange:\n\t\tcase 'controlchange':\n\t\tcase 'control-change':\n\t\t\t_module._fluid_event_control_change(ev, event.channel, event.control, event.value);\n\t\t\tbreak;\n\t\tcase EventType.PitchBend:\n\t\tcase 'pitchbend':\n\t\tcase 'pitch-bend':\n\t\t\t_module._fluid_event_pitch_bend(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.PitchWheelSensitivity:\n\t\tcase 'pitchwheelsens':\n\t\tcase 'pitchwheelsensitivity':\n\t\tcase 'pitch-wheel-sens':\n\t\tcase 'pitch-wheel-sensitivity':\n\t\t\t_module._fluid_event_pitch_wheelsens(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Modulation:\n\t\tcase 'modulation':\n\t\t\t_module._fluid_event_modulation(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Sustain:\n\t\tcase 'sustain':\n\t\t\t_module._fluid_event_sustain(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Pan:\n\t\tcase 'pan':\n\t\t\t_module._fluid_event_pan(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Volume:\n\t\tcase 'volume':\n\t\t\t_module._fluid_event_volume(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ReverbSend:\n\t\tcase 'reverb':\n\t\tcase 'reverbsend':\n\t\tcase 'reverb-send':\n\t\t\t_module._fluid_event_reverb_send(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ChorusSend:\n\t\tcase 'chorus':\n\t\tcase 'chorussend':\n\t\tcase 'chorus-send':\n\t\t\t_module._fluid_event_chorus_send(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.KeyPressure:\n\t\tcase 'keypressure':\n\t\tcase 'key-pressure':\n\t\tcase 'aftertouch':\n\t\t\t_module._fluid_event_key_pressure(ev, event.channel, event.key, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ChannelPressure:\n\t\tcase 'channelpressure':\n\t\tcase 'channel-pressure':\n\t\tcase 'channel-aftertouch':\n\t\t\t_module._fluid_event_channel_pressure(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.SystemReset:\n\t\tcase 'systemreset':\n\t\tcase 'system-reset':\n\t\t\t_module._fluid_event_system_reset(ev);\n\t\t\tbreak;\n\t\tcase EventType.Timer:\n\t\tcase 'timer':\n\t\t\t_module._fluid_event_timer(ev, event.data);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// 'typeof event' must be 'never' here\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Rewrites event data with specified SequencerEvent object.\n * @param data destination instance\n * @param event source data\n * @return true if succeeded\n */\nexport function rewriteEventData(data: ISequencerEventData, event: SequencerEvent): boolean {\n\tif (!data || !(data instanceof SequencerEventData)) {\n\t\treturn false;\n\t}\n\tconst ev = data.getRaw();\n\tif (ev === INVALID_POINTER) {\n\t\treturn false;\n\t}\n\treturn rewriteEventDataImpl(ev, event);\n}\n","\nimport ISequencer, { ClientInfo } from './ISequencer';\nimport ISequencerEventData, { rewriteEventDataImpl } from './ISequencerEventData';\nimport ISynthesizer from './ISynthesizer';\nimport PointerType, { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport SequencerEvent from './SequencerEvent';\nimport SequencerEventData from './SequencerEventData';\nimport { _module, _removeFunction, bindFunctions } from './WasmManager';\n\nimport Synthesizer from './Synthesizer';\n\ntype SequencerPointer = UniquePointerType<'sequencer_ptr'>;\ntype SequencerId = number;\n\nlet bound = false;\nlet fluid_sequencer_get_client_name: (seq: number, id: number) => string;\n\nfunction bindFunctionsForSequencer() {\n\tif (bound) {\n\t\treturn;\n\t}\n\tbindFunctions();\n\tbound = true;\n\n\tfluid_sequencer_get_client_name =\n\t\t_module.cwrap('fluid_sequencer_get_client_name', 'string', ['number', 'number']);\n}\n\nfunction makeEvent(event: SequencerEvent): PointerType | null {\n\tconst ev = _module._new_fluid_event();\n\tif (!rewriteEventDataImpl(ev, event)) {\n\t\t_module._delete_fluid_event(ev);\n\t\treturn null;\n\t}\n\treturn ev;\n}\n\n/** @internal */\nexport default class Sequencer implements ISequencer {\n\n\tprivate _seq: SequencerPointer;\n\tprivate _seqId: SequencerId;\n\n\t/** @internal */\n\tpublic _clientFuncMap: { [id: number]: number };\n\n\tconstructor() {\n\t\tbindFunctionsForSequencer();\n\n\t\tthis._seq = INVALID_POINTER;\n\t\tthis._seqId = -1;\n\t\tthis._clientFuncMap = {};\n\t}\n\n\t/** @internal */\n\tpublic _initialize(): Promise<void> {\n\t\tthis.close();\n\t\tthis._seq = _module._new_fluid_sequencer2(0);\n\t\tthis._seqId = -1;\n\t\treturn Promise.resolve();\n\t}\n\n\t/** @internal */\n\tpublic getRaw() {\n\t\treturn this._seq;\n\t}\n\n\tpublic close() {\n\t\tif (this._seq !== INVALID_POINTER) {\n\t\t\tObject.keys(this._clientFuncMap).forEach((clientIdStr) => {\n\t\t\t\tthis.unregisterClient(Number(clientIdStr));\n\t\t\t});\n\t\t\tthis.unregisterClient(-1);\n\t\t\t_module._delete_fluid_sequencer(this._seq);\n\t\t\tthis._seq = INVALID_POINTER;\n\t\t}\n\t}\n\n\tpublic registerSynthesizer(synth: ISynthesizer | number): Promise<number> {\n\t\tif (this._seqId !== -1) {\n\t\t\t_module._fluid_sequencer_unregister_client(this._seq, this._seqId);\n\t\t\tthis._seqId = -1;\n\t\t}\n\t\tlet val: number;\n\t\tif (typeof synth === 'number') {\n\t\t\tval = synth;\n\t\t} else if (synth instanceof Synthesizer) {\n\t\t\tval = synth.getRawSynthesizer();\n\t\t} else {\n\t\t\treturn Promise.reject(new TypeError('\\'synth\\' is not a compatible type instance'));\n\t\t}\n\n\t\tthis._seqId = _module._fluid_sequencer_register_fluidsynth(this._seq, val);\n\t\treturn Promise.resolve(this._seqId);\n\t}\n\n\tpublic unregisterClient(clientId: number): void {\n\t\tif (clientId === -1) {\n\t\t\tclientId = this._seqId;\n\t\t\tif (clientId === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// send 'unregistering' event\n\t\tconst ev = _module._new_fluid_event();\n\t\t_module._fluid_event_set_source(ev, -1);\n\t\t_module._fluid_event_set_dest(ev, clientId);\n\t\t_module._fluid_event_unregistering(ev);\n\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t_module._delete_fluid_event(ev);\n\n\t\t_module._fluid_sequencer_unregister_client(this._seq, clientId);\n\t\tif (this._seqId === clientId) {\n\t\t\tthis._seqId = -1;\n\t\t} else {\n\t\t\tconst map = this._clientFuncMap;\n\t\t\tif (map[clientId]) {\n\t\t\t\t_removeFunction(map[clientId]);\n\t\t\t\tdelete map[clientId];\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getAllRegisteredClients(): Promise<ClientInfo[]> {\n\t\tconst c = _module._fluid_sequencer_count_clients(this._seq);\n\t\tconst r: ClientInfo[] = [];\n\t\tfor (let i = 0; i < c; ++i) {\n\t\t\tconst id = _module._fluid_sequencer_get_client_id(this._seq, i);\n\t\t\tconst name = fluid_sequencer_get_client_name(this._seq, id);\n\t\t\tr.push({ clientId: id, name: name });\n\t\t}\n\t\treturn Promise.resolve(r);\n\t}\n\n\tpublic getClientCount(): Promise<number> {\n\t\treturn Promise.resolve<number>(_module._fluid_sequencer_count_clients(this._seq));\n\t}\n\n\tpublic getClientInfo(index: number): Promise<ClientInfo> {\n\t\tconst id = _module._fluid_sequencer_get_client_id(this._seq, index);\n\t\tconst name = fluid_sequencer_get_client_name(this._seq, id);\n\t\treturn Promise.resolve<ClientInfo>({ clientId: id, name: name });\n\t}\n\n\tpublic setTimeScale(scale: number): void {\n\t\t_module._fluid_sequencer_set_time_scale(this._seq, scale);\n\t}\n\n\tpublic getTimeScale(): Promise<number> {\n\t\treturn Promise.resolve(_module._fluid_sequencer_get_time_scale(this._seq));\n\t}\n\n\tpublic getTick(): Promise<number> {\n\t\treturn Promise.resolve(_module._fluid_sequencer_get_tick(this._seq));\n\t}\n\n\tpublic sendEventAt(event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t// send to all clients\n\t\t\tconst count = _module._fluid_sequencer_count_clients(this._seq);\n\t\t\tfor (let i = 0; i < count; ++i) {\n\t\t\t\tconst id: number = _module._fluid_sequencer_get_client_id(this._seq, i);\n\t\t\t\t_module._fluid_event_set_dest(ev, id);\n\t\t\t\t_module._fluid_sequencer_send_at(this._seq, ev, tick, isAbsolute ? 1 : 0);\n\t\t\t}\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\tpublic sendEventToClientAt(clientId: number, event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_at(this._seq, ev, tick, isAbsolute ? 1 : 0);\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic sendEventToClientNow(clientId: number, event: SequencerEvent): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic sendEventNow(clientId: number, eventData: ISequencerEventData): void {\n\t\tif (!(eventData instanceof SequencerEventData)) {\n\t\t\treturn;\n\t\t}\n\t\tconst ev = eventData.getRaw();\n\t\tif (ev !== INVALID_POINTER) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t}\n\t}\n\n\tpublic removeAllEvents(): void {\n\t\t_module._fluid_sequencer_remove_events(this._seq, -1, -1, -1);\n\t}\n\n\tpublic removeAllEventsFromClient(clientId: number): void {\n\t\t_module._fluid_sequencer_remove_events(this._seq, -1, clientId === -1 ? this._seqId : clientId, -1);\n\t}\n\n\tpublic processSequencer(msecToProcess: number) {\n\t\tif (this._seq !== INVALID_POINTER) {\n\t\t\t_module._fluid_sequencer_process(this._seq, msecToProcess);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic setIntervalForSequencer(msec: number) {\n\t\treturn setInterval(() => this.processSequencer(msec), msec);\n\t}\n}\n","import { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport Preset from './Preset';\nimport Synthesizer from './Synthesizer';\nimport { _module, bindFunctions } from './WasmManager';\n\ntype SFontPointer = UniquePointerType<'sfont_ptr'>;\ntype PresetPointer = UniquePointerType<'preset_ptr'>;\n\nlet bound = false;\nlet fluid_sfont_get_name: (sfont: SFontPointer) => string;\nlet fluid_preset_get_name: (preset: PresetPointer) => string;\n\nfunction bindFunctionsForSoundfont() {\n\tif (bound) {\n\t\treturn;\n\t}\n\tbindFunctions();\n\tbound = true;\n\n\tfluid_sfont_get_name =\n\t\t_module.cwrap('fluid_sfont_get_name', 'string', ['number']);\n\tfluid_preset_get_name =\n\t\t_module.cwrap('fluid_preset_get_name', 'string', ['number']);\n}\n\nexport default class Soundfont {\n\tprivate readonly _ptr: SFontPointer;\n\n\t// @internal\n\tpublic constructor(sfontPtr: SFontPointer) {\n\t\tthis._ptr = sfontPtr;\n\t}\n\n\tpublic static getSoundfontById(synth: Synthesizer, id: number): Soundfont | null {\n\t\tbindFunctionsForSoundfont();\n\n\t\tconst sfont = _module._fluid_synth_get_sfont_by_id(synth.getRawSynthesizer(), id);\n\t\tif (sfont === INVALID_POINTER) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Soundfont(sfont);\n\t}\n\n\tpublic getName(): string {\n\t\treturn fluid_sfont_get_name(this._ptr);\n\t}\n\n\tpublic getPreset(bank: number, presetNum: number): Preset | null {\n\t\tconst presetPtr: PresetPointer = _module._fluid_sfont_get_preset(this._ptr, bank, presetNum);\n\t\tif (presetPtr === INVALID_POINTER) {\n\t\t\treturn null;\n\t\t}\n\t\tconst name = fluid_preset_get_name(presetPtr);\n\t\tconst bankNum = _module._fluid_preset_get_banknum(presetPtr);\n\t\tconst num = _module._fluid_preset_get_num(presetPtr);\n\t\treturn {\n\t\t\tsoundfont: this,\n\t\t\tname,\n\t\t\tbankNum,\n\t\t\tnum\n\t\t};\n\t}\n\n\tpublic getPresetIterable(): Iterable<Preset> {\n\t\tconst reset = () => {\n\t\t\t_module._fluid_sfont_iteration_start(this._ptr);\n\t\t};\n\t\tconst next = (): IteratorResult<Preset, void> => {\n\t\t\tconst presetPtr = _module._fluid_sfont_iteration_next(this._ptr);\n\t\t\tif (presetPtr === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst name = fluid_preset_get_name(presetPtr);\n\t\t\t\tconst bankNum = _module._fluid_preset_get_banknum(presetPtr);\n\t\t\t\tconst num = _module._fluid_preset_get_num(presetPtr);\n\t\t\t\treturn {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tsoundfont: this,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tbankNum,\n\t\t\t\t\t\tnum\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst iterator = (): Iterator<Preset> => {\n\t\t\treset();\n\t\t\treturn {\n\t\t\t\tnext,\n\t\t\t};\n\t\t};\n\t\treturn {\n\t\t\t[Symbol.iterator]: iterator,\n\t\t};\n\t}\n}\n","import { _module, bindFunctions } from './WasmManager';\n\nlet _ptrDefaultLogFunction: number | undefined;\nlet _disabledLoggingLevel: LogLevel | null = null;\nconst _handlers: Array<(level: LogLevel | null) => void> = [];\n\nconst LOG_LEVEL_COUNT = 5;\n/** Log level for libfluidsynth */\nconst LogLevel = {\n\tPanic: 0,\n\tError: 1,\n\tWarning: 2,\n\tInfo: 3,\n\tDebug: 4,\n} as const;\n/** Log level for libfluidsynth */\ntype LogLevel = (typeof LogLevel)[keyof typeof LogLevel];\nexport { LogLevel };\n\n/**\n * Disable log output from libfluidsynth.\n * @param level disable log level (when `LogLevel.Warning` is specified, `Warning` `Info` `Debug` is disabled)\n * - If `null` is specified, log output feature is restored to the default.\n */\nexport function disableLogging(level: LogLevel | null = LogLevel.Panic): void {\n\tif (_disabledLoggingLevel === level) {\n\t\treturn;\n\t}\n\tbindFunctions();\n\tif (level == null) {\n\t\tif (_ptrDefaultLogFunction != null) {\n\t\t\t_module._fluid_set_log_function(0, _ptrDefaultLogFunction, 0);\n\t\t\t_module._fluid_set_log_function(1, _ptrDefaultLogFunction, 0);\n\t\t\t_module._fluid_set_log_function(2, _ptrDefaultLogFunction, 0);\n\t\t\t_module._fluid_set_log_function(3, _ptrDefaultLogFunction, 0);\n\t\t}\n\t\t_module._fluid_set_log_function(4, 0, 0);\n\t} else {\n\t\tlet ptr: number | undefined;\n\t\tfor (let l = level; l < LOG_LEVEL_COUNT; ++l) {\n\t\t\tconst p = _module._fluid_set_log_function(l, 0, 0);\n\t\t\tif (l !== LogLevel.Debug) {\n\t\t\t\tptr = p;\n\t\t\t}\n\t\t}\n\t\tif (ptr != null && _ptrDefaultLogFunction == null) {\n\t\t\t_ptrDefaultLogFunction = ptr;\n\t\t}\n\t}\n\t_disabledLoggingLevel = level;\n\tfor (const fn of _handlers) {\n\t\tfn(level);\n\t}\n}\n\n/**\n * Restores the log output from libfluidsynth. Same for calling `disableLogging(null)`.\n */\nexport function restoreLogging(): void {\n\tdisableLogging(null);\n}\n\n// @internal\nexport function getDisabledLoggingLevel(): LogLevel | null {\n\treturn _disabledLoggingLevel;\n}\n\n// @internal\nexport function addLoggingStatusChangedHandler(\n\tfn: (level: LogLevel | null) => void\n): void {\n\t_handlers.push(fn);\n}\n\n// @internal\nexport function removeLoggingStatusChangedHandler(\n\tfn: (level: LogLevel | null) => void\n): void {\n\tfor (let i = 0; i < _handlers.length; ++i) {\n\t\tif (_handlers[i] === fn) {\n\t\t\t_handlers.splice(i, 1);\n\t\t\treturn;\n\t\t}\n\t}\n}\n","\nimport {\n\tSynthesizerDefaultValues,\n\tInterpolationValues,\n\tChorusModulation,\n\tGeneratorTypes,\n\tLegatoMode,\n\tPortamentoMode,\n\tPlayerSetTempoType,\n} from './Constants';\nimport IMIDIEvent from './IMIDIEvent';\nimport ISequencer from './ISequencer';\nimport ISequencerEventData from './ISequencerEventData';\nimport ISynthesizer from './ISynthesizer';\nimport PointerType, { INVALID_POINTER } from './PointerType';\nimport SynthesizerSettings from './SynthesizerSettings';\nimport {\n\tPlayerId,\n\tSettingsId,\n\tSynthId,\n\t_addFunction,\n\t_fs,\n\t_module,\n\t_removeFunction,\n\tbindFunctions,\n\tdefaultMIDIEventCallback,\n\tfluid_sequencer_register_client,\n\tfluid_settings_setint,\n\tfluid_settings_setnum,\n\tfluid_settings_setstr,\n\tfluid_synth_error,\n\tfluid_synth_sfload,\n\tmalloc,\n\tfree,\n\twaitForInitialized,\n} from './WasmManager';\n\nimport MIDIEvent, { MIDIEventType } from './MIDIEvent';\nimport Sequencer from './Sequencer';\nimport SequencerEvent, { EventType as SequencerEventType } from './SequencerEvent';\nimport SequencerEventData from './SequencerEventData';\nimport Soundfont from './Soundfont';\n\nfunction setBoolValueForSettings(settings: SettingsId, name: string, value: boolean | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setint(settings, name, value ? 1 : 0);\n\t}\n}\nfunction setIntValueForSettings(settings: SettingsId, name: string, value: number | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setint(settings, name, value);\n\t}\n}\nfunction setNumValueForSettings(settings: SettingsId, name: string, value: number | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setnum(settings, name, value);\n\t}\n}\nfunction setStrValueForSettings(settings: SettingsId, name: string, value: string | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setstr(settings, name, value);\n\t}\n}\n\nfunction getActiveVoiceCount(synth: SynthId): number {\n\tconst actualCount = _module._fluid_synth_get_active_voice_count(synth);\n\tif (!actualCount) {\n\t\treturn 0;\n\t}\n\n\t// FluidSynth may return incorrect value for active voice count,\n\t// so check internal data and correct it\n\n\t// check if the structure is not changed\n\t// for fluidsynth 2.0.x-2.1.x:\n\t//   140 === offset [synth->voice]\n\t//   144 === offset [synth->active_voice_count] for \n\t// for fluidsynth 2.2.x:\n\t//   144 === offset [synth->voice]\n\t//   148 === offset [synth->active_voice_count]\n\t// first check 2.1.x structure\n\tlet baseOffsetOfVoice = 140;\n\tlet offsetOfActiveVoiceCount = (synth + baseOffsetOfVoice + 4) >> 2;\n\tlet structActiveVoiceCount = _module.HEAPU32[offsetOfActiveVoiceCount];\n\tif (structActiveVoiceCount !== actualCount) {\n\t\t// add 4 for 2.2.x\n\t\tbaseOffsetOfVoice += 4;\n\t\toffsetOfActiveVoiceCount = (synth + baseOffsetOfVoice + 4) >> 2;\n\t\tstructActiveVoiceCount = _module.HEAPU32[offsetOfActiveVoiceCount];\n\t\tif (structActiveVoiceCount !== actualCount) {\n\t\t\t// unknown structure\n\t\t\tconst c = console;\n\t\t\tc.warn(\n\t\t\t\t'js-synthesizer: cannot check synthesizer internal data (may be changed)'\n\t\t\t);\n\t\t\treturn actualCount;\n\t\t}\n\t}\n\n\tconst voiceList = _module.HEAPU32[(synth + baseOffsetOfVoice) >> 2];\n\t// (voice should not be NULL)\n\tif (!voiceList || voiceList >= _module.HEAPU32.byteLength) {\n\t\t// unknown structure\n\t\tconst c = console;\n\t\tc.warn(\n\t\t\t'js-synthesizer: cannot check synthesizer internal data (may be changed)'\n\t\t);\n\t\treturn actualCount;\n\t}\n\n\t// count of internal voice data is restricted to polyphony value\n\tconst voiceCount = _module._fluid_synth_get_polyphony(synth);\n\tlet isRunning = false;\n\tfor (let i = 0; i < voiceCount; ++i) {\n\t\t// auto voice = voiceList[i]\n\t\tconst voice = _module.HEAPU32[(voiceList >> 2) + i];\n\t\tif (!voice) {\n\t\t\tcontinue;\n\t\t}\n\t\t// offset [voice->status]\n\t\tconst status = _module.HEAPU8[voice + 4];\n\t\t// 4: FLUID_VOICE_OFF\n\t\tif (status !== 4) {\n\t\t\tisRunning = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!isRunning) {\n\t\tif (structActiveVoiceCount !== 0) {\n\t\t\tconst c = console;\n\t\t\tc.warn(\n\t\t\t\t'js-synthesizer: Active voice count is not zero, but all voices are off:',\n\t\t\t\tstructActiveVoiceCount,\n\t\t\t);\n\t\t}\n\t\t_module.HEAPU32[offsetOfActiveVoiceCount] = 0;\n\t\treturn 0;\n\t}\n\n\treturn actualCount;\n}\n\nfunction makeRandomFileName(type: string, ext: string) {\n\treturn `/${type}-r${Math.random() * 65535}-${Math.random() * 65535}${ext}`;\n}\n\n/** Hook callback function type */\nexport interface HookMIDIEventCallback {\n\t/**\n\t * Hook callback function type.\n\t * @param synth the base synthesizer instance\n\t * @param eventType MIDI event type (e.g. 0x90 is note-on event)\n\t * @param eventData detailed event data\n\t * @param param parameter data passed to the registration method\n\t * @return true if the event data is processed, or false if the default processing is necessary\n\t */\n\t(synth: Synthesizer, eventType: number, eventData: IMIDIEvent, param: any): boolean;\n}\n\n/** Client callback function type for sequencer object */\nexport interface SequencerClientCallback {\n\t/**\n\t * Client callback function type for sequencer object.\n\t * @param time the sequencer tick value\n\t * @param eventType sequencer event type\n\t * @param event actual event data (can only be used in this callback function)\n\t * @param sequencer the base sequencer object\n\t * @param param parameter data passed to the registration method\n\t */\n\t(time: number, eventType: SequencerEventType, event: ISequencerEventData, sequencer: ISequencer, param: number): void;\n}\n\nfunction makeMIDIEventCallback(synth: Synthesizer, cb: HookMIDIEventCallback, param: any) {\n\treturn (data: PointerType, event: MIDIEventType): number => {\n\t\tconst t = _module._fluid_midi_event_get_type(event);\n\t\tif (cb(synth, t, new MIDIEvent(event, _module), param)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn _module._fluid_synth_handle_midi_event(data, event);\n\t};\n}\n\n/** Default implementation of ISynthesizer */\nexport default class Synthesizer implements ISynthesizer {\n\t/** @internal */\n\tprivate _settings: SettingsId;\n\t/** @internal */\n\tprivate _synth: SynthId;\n\t/** @internal */\n\tprivate _player: PlayerId;\n\t/** @internal */\n\tprivate _playerPlaying: boolean;\n\t/** @internal */\n\tprivate _playerDefer:\n\t\t| undefined\n\t\t| {\n\t\t\t\tpromise: Promise<void>;\n\t\t\t\tresolve: () => void;\n\t\t  };\n\t/** @internal */\n\tprivate _playerCallbackPtr: number | null;\n\t/** @internal */\n\tprivate _fluidSynthCallback: PointerType | null;\n\n\t/** @internal */\n\tprivate _buffer: PointerType;\n\t/** @internal */\n\tprivate _bufferSize: number;\n\t/** @internal */\n\tprivate _numPtr: PointerType;\n\n\t/** @internal */\n\tprivate _gain: number;\n\n\tconstructor() {\n\t\tbindFunctions();\n\n\t\tthis._settings = INVALID_POINTER;\n\t\tthis._synth = INVALID_POINTER;\n\t\tthis._player = INVALID_POINTER;\n\t\tthis._playerPlaying = false;\n\t\tthis._playerCallbackPtr = null;\n\t\tthis._fluidSynthCallback = null;\n\n\t\tthis._buffer = INVALID_POINTER;\n\t\tthis._bufferSize = 0;\n\t\tthis._numPtr = INVALID_POINTER;\n\n\t\tthis._gain = SynthesizerDefaultValues.Gain;\n\t}\n\n\t/**\n\t * Initializes with loaded FluidSynth module.\n\t * If using this method, you must call this before all methods/constructors, including `waitForWasmInitialized`.\n\t * @param mod loaded libfluidsynth.js instance (typically `const mod = Module` (loaded via script tag) or `const mod = require('libfluidsynth-*.js')` (in Node.js))\n\t */\n\tpublic static initializeWithFluidSynthModule(mod: unknown): void {\n\t\tbindFunctions(mod);\n\t}\n\n\t/** Return the promise object that resolves when WebAssembly has been initialized. */\n\tpublic static waitForWasmInitialized(): Promise<void> {\n\t\treturn waitForInitialized();\n\t}\n\n\tpublic isInitialized() {\n\t\treturn this._synth !== INVALID_POINTER;\n\t}\n\n\t/** Return the raw synthesizer instance value (pointer for libfluidsynth). */\n\tpublic getRawSynthesizer(): number {\n\t\treturn this._synth;\n\t}\n\n\tpublic createAudioNode(\n\t\tcontext: AudioContext,\n\t\tframeSize?: number\n\t): AudioNode {\n\t\tconst node = context.createScriptProcessor(frameSize, 0, 2);\n\t\tnode.addEventListener(\"audioprocess\", (ev) => {\n\t\t\tthis.render(ev.outputBuffer);\n\t\t});\n\t\treturn node;\n\t}\n\n\tpublic init(sampleRate: number, settings?: SynthesizerSettings) {\n\t\tthis.close();\n\n\t\tconst set = (this._settings = _module._new_fluid_settings());\n\t\tfluid_settings_setnum(set, \"synth.sample-rate\", sampleRate);\n\t\tif (settings) {\n\t\t\tif (typeof settings.initialGain !== \"undefined\") {\n\t\t\t\tthis._gain = settings.initialGain;\n\t\t\t}\n\t\t\tsetBoolValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.chorus.active\",\n\t\t\t\tsettings.chorusActive\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.chorus.depth\",\n\t\t\t\tsettings.chorusDepth\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.chorus.level\",\n\t\t\t\tsettings.chorusLevel\n\t\t\t);\n\t\t\tsetIntValueForSettings(set, \"synth.chorus.nr\", settings.chorusNr);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.chorus.speed\",\n\t\t\t\tsettings.chorusSpeed\n\t\t\t);\n\t\t\tsetIntValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.midi-channels\",\n\t\t\t\tsettings.midiChannelCount\n\t\t\t);\n\t\t\tsetStrValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.midi-bank-select\",\n\t\t\t\tsettings.midiBankSelect\n\t\t\t);\n\t\t\tsetIntValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.min-note-length\",\n\t\t\t\tsettings.minNoteLength\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.overflow.age\",\n\t\t\t\tsettings.overflowAge\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.overflow.important\",\n\t\t\t\tsettings.overflowImportantValue\n\t\t\t);\n\t\t\tif (typeof settings.overflowImportantChannels !== \"undefined\") {\n\t\t\t\tfluid_settings_setstr(\n\t\t\t\t\tset,\n\t\t\t\t\t\"synth.overflow.important-channels\",\n\t\t\t\t\tsettings.overflowImportantChannels.join(\",\")\n\t\t\t\t);\n\t\t\t}\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.overflow.percussion\",\n\t\t\t\tsettings.overflowPercussion\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.overflow.released\",\n\t\t\t\tsettings.overflowReleased\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.overflow.sustained\",\n\t\t\t\tsettings.overflowSustained\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.overflow.volume\",\n\t\t\t\tsettings.overflowVolume\n\t\t\t);\n\t\t\tsetIntValueForSettings(set, \"synth.polyphony\", settings.polyphony);\n\t\t\tsetBoolValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.reverb.active\",\n\t\t\t\tsettings.reverbActive\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.reverb.damp\",\n\t\t\t\tsettings.reverbDamp\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.reverb.level\",\n\t\t\t\tsettings.reverbLevel\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.reverb.room-size\",\n\t\t\t\tsettings.reverbRoomSize\n\t\t\t);\n\t\t\tsetNumValueForSettings(\n\t\t\t\tset,\n\t\t\t\t\"synth.reverb.width\",\n\t\t\t\tsettings.reverbWidth\n\t\t\t);\n\t\t}\n\t\tfluid_settings_setnum(set, \"synth.gain\", this._gain);\n\n\t\tthis._synth = _module._new_fluid_synth(this._settings);\n\n\t\tthis._numPtr = malloc(8);\n\t}\n\n\tpublic close() {\n\t\tif (this._synth === INVALID_POINTER) {\n\t\t\treturn;\n\t\t}\n\t\tthis._closePlayer();\n\t\t_module._delete_fluid_synth(this._synth);\n\t\tthis._synth = INVALID_POINTER;\n\t\t_module._delete_fluid_settings(this._settings);\n\t\tthis._settings = INVALID_POINTER;\n\t\tfree(this._numPtr);\n\t\tthis._numPtr = INVALID_POINTER;\n\t}\n\n\tpublic isPlaying() {\n\t\treturn (\n\t\t\tthis._synth !== INVALID_POINTER &&\n\t\t\tgetActiveVoiceCount(this._synth) > 0\n\t\t);\n\t}\n\n\tpublic setInterpolation(value: InterpolationValues, channel?: number) {\n\t\tthis.ensureInitialized();\n\t\tif (typeof channel === \"undefined\") {\n\t\t\tchannel = -1;\n\t\t}\n\t\t_module._fluid_synth_set_interp_method(this._synth, channel, value);\n\t}\n\n\tpublic getGain() {\n\t\treturn this._gain;\n\t}\n\n\tpublic setGain(gain: number) {\n\t\tthis.ensureInitialized();\n\t\t_module._fluid_synth_set_gain(this._synth, gain);\n\t\tthis._gain = _module._fluid_synth_get_gain(this._synth);\n\t}\n\n\tpublic setChannelType(channel: number, isDrum: boolean) {\n\t\tthis.ensureInitialized();\n\t\t// CHANNEL_TYPE_MELODIC = 0, CHANNEL_TYPE_DRUM = 1\n\t\t_module._fluid_synth_set_channel_type(\n\t\t\tthis._synth,\n\t\t\tchannel,\n\t\t\tisDrum ? 1 : 0\n\t\t);\n\t}\n\n\tpublic waitForVoicesStopped() {\n\t\treturn this.flushFramesAsync();\n\t}\n\n\tpublic loadSFont(bin: ArrayBuffer) {\n\t\tthis.ensureInitialized();\n\n\t\tconst name = makeRandomFileName(\"sfont\", \".sf2\");\n\t\tconst ub = new Uint8Array(bin);\n\n\t\t_fs.writeFile(name, ub);\n\t\tconst sfont = fluid_synth_sfload(this._synth, name, 1);\n\t\t_fs.unlink(name);\n\t\treturn sfont === -1\n\t\t\t? Promise.reject(new Error(fluid_synth_error!(this._synth)))\n\t\t\t: Promise.resolve(sfont);\n\t}\n\n\tpublic unloadSFont(id: number) {\n\t\tthis.ensureInitialized();\n\t\tthis.stopPlayer();\n\t\tthis.flushFramesSync();\n\n\t\t_module._fluid_synth_sfunload(this._synth, id, 1);\n\t}\n\n\tpublic unloadSFontAsync(id: number) {\n\t\t// not throw with Promise.reject\n\t\tthis.ensureInitialized();\n\t\tthis.stopPlayer();\n\t\treturn this.flushFramesAsync().then(() => {\n\t\t\t_module._fluid_synth_sfunload(this._synth, id, 1);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the `Soundfont` instance for specified SoundFont.\n\t * @param sfontId loaded SoundFont id ({@link loadSFont} returns this)\n\t * @return `Soundfont` instance or `null` if `sfontId` is not valid or loaded\n\t */\n\tpublic getSFontObject(sfontId: number): Soundfont | null {\n\t\treturn Soundfont.getSoundfontById(this, sfontId);\n\t}\n\n\tpublic getSFontBankOffset(id: number) {\n\t\tthis.ensureInitialized();\n\t\treturn Promise.resolve(\n\t\t\t_module._fluid_synth_get_bank_offset(this._synth, id) as number\n\t\t);\n\t}\n\tpublic setSFontBankOffset(id: number, offset: number) {\n\t\tthis.ensureInitialized();\n\t\t_module._fluid_synth_set_bank_offset(this._synth, id, offset);\n\t}\n\n\tpublic render(outBuffer: AudioBuffer | Float32Array[]) {\n\t\tconst frameCount =\n\t\t\t\"numberOfChannels\" in outBuffer\n\t\t\t\t? outBuffer.length\n\t\t\t\t: outBuffer[0].length;\n\t\tconst channels =\n\t\t\t\"numberOfChannels\" in outBuffer\n\t\t\t\t? outBuffer.numberOfChannels\n\t\t\t\t: outBuffer.length;\n\t\tconst sizePerChannel = 4 * frameCount;\n\t\tconst totalSize = sizePerChannel * 2;\n\t\tif (this._bufferSize < totalSize) {\n\t\t\tif (this._buffer !== INVALID_POINTER) {\n\t\t\t\tfree(this._buffer);\n\t\t\t}\n\t\t\tthis._buffer = malloc(totalSize);\n\t\t\tthis._bufferSize = totalSize;\n\t\t}\n\n\t\tconst memLeft = this._buffer;\n\t\tconst memRight = ((this._buffer as number) +\n\t\t\tsizePerChannel) as PointerType;\n\t\tthis.renderRaw(memLeft, memRight, frameCount);\n\n\t\tconst aLeft = new Float32Array(\n\t\t\t_module.HEAPU8.buffer,\n\t\t\tmemLeft,\n\t\t\tframeCount\n\t\t);\n\t\tconst aRight =\n\t\t\tchannels >= 2\n\t\t\t\t? new Float32Array(_module.HEAPU8.buffer, memRight, frameCount)\n\t\t\t\t: null;\n\t\tif (\"numberOfChannels\" in outBuffer) {\n\t\t\tif (outBuffer.copyToChannel) {\n\t\t\t\toutBuffer.copyToChannel(aLeft, 0, 0);\n\t\t\t\tif (aRight) {\n\t\t\t\t\toutBuffer.copyToChannel(aRight, 1, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// copyToChannel API not exist in Safari AudioBuffer\n\t\t\t\tconst leftData = outBuffer.getChannelData(0);\n\t\t\t\taLeft.forEach((val, i) => (leftData[i] = val));\n\t\t\t\tif (aRight) {\n\t\t\t\t\tconst rightData = outBuffer.getChannelData(1);\n\t\t\t\t\taRight.forEach((val, i) => (rightData[i] = val));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\toutBuffer[0].set(aLeft);\n\t\t\tif (aRight) {\n\t\t\t\toutBuffer[1].set(aRight);\n\t\t\t}\n\t\t}\n\n\t\t// check and update player status\n\t\tthis.isPlayerPlaying();\n\t}\n\n\tpublic midiNoteOn(chan: number, key: number, vel: number) {\n\t\t_module._fluid_synth_noteon(this._synth, chan, key, vel);\n\t}\n\tpublic midiNoteOff(chan: number, key: number) {\n\t\t_module._fluid_synth_noteoff(this._synth, chan, key);\n\t}\n\tpublic midiKeyPressure(chan: number, key: number, val: number) {\n\t\t_module._fluid_synth_key_pressure(this._synth, chan, key, val);\n\t}\n\tpublic midiControl(chan: number, ctrl: number, val: number) {\n\t\t_module._fluid_synth_cc(this._synth, chan, ctrl, val);\n\t}\n\tpublic midiProgramChange(chan: number, prognum: number) {\n\t\t_module._fluid_synth_program_change(this._synth, chan, prognum);\n\t}\n\tpublic midiChannelPressure(chan: number, val: number) {\n\t\t_module._fluid_synth_channel_pressure(this._synth, chan, val);\n\t}\n\tpublic midiPitchBend(chan: number, val: number) {\n\t\t_module._fluid_synth_pitch_bend(this._synth, chan, val);\n\t}\n\tpublic midiSysEx(data: Uint8Array) {\n\t\tconst len = data.byteLength;\n\t\tconst mem = malloc(len);\n\t\t_module.HEAPU8.set(data, mem);\n\t\t_module._fluid_synth_sysex(\n\t\t\tthis._synth,\n\t\t\tmem,\n\t\t\tlen,\n\t\t\tINVALID_POINTER,\n\t\t\tINVALID_POINTER,\n\t\t\tINVALID_POINTER,\n\t\t\t0\n\t\t);\n\t\tfree(mem);\n\t}\n\n\tpublic midiPitchWheelSensitivity(chan: number, val: number) {\n\t\t_module._fluid_synth_pitch_wheel_sens(this._synth, chan, val);\n\t}\n\tpublic midiBankSelect(chan: number, bank: number) {\n\t\t_module._fluid_synth_bank_select(this._synth, chan, bank);\n\t}\n\tpublic midiSFontSelect(chan: number, sfontId: number) {\n\t\t_module._fluid_synth_sfont_select(this._synth, chan, sfontId);\n\t}\n\tpublic midiProgramSelect(\n\t\tchan: number,\n\t\tsfontId: number,\n\t\tbank: number,\n\t\tpresetNum: number\n\t) {\n\t\t_module._fluid_synth_program_select(\n\t\t\tthis._synth,\n\t\t\tchan,\n\t\t\tsfontId,\n\t\t\tbank,\n\t\t\tpresetNum\n\t\t);\n\t}\n\tpublic midiUnsetProgram(chan: number) {\n\t\t_module._fluid_synth_unset_program(this._synth, chan);\n\t}\n\tpublic midiProgramReset() {\n\t\t_module._fluid_synth_program_reset(this._synth);\n\t}\n\tpublic midiSystemReset() {\n\t\t_module._fluid_synth_system_reset(this._synth);\n\t}\n\tpublic midiAllNotesOff(chan?: number) {\n\t\t_module._fluid_synth_all_notes_off(\n\t\t\tthis._synth,\n\t\t\ttypeof chan === \"undefined\" ? -1 : chan\n\t\t);\n\t}\n\tpublic midiAllSoundsOff(chan?: number) {\n\t\t_module._fluid_synth_all_sounds_off(\n\t\t\tthis._synth,\n\t\t\ttypeof chan === \"undefined\" ? -1 : chan\n\t\t);\n\t}\n\tpublic midiSetChannelType(chan: number, isDrum: boolean) {\n\t\t// CHANNEL_TYPE_MELODIC = 0\n\t\t// CHANNEL_TYPE_DRUM = 1\n\t\t_module._fluid_synth_set_channel_type(\n\t\t\tthis._synth,\n\t\t\tchan,\n\t\t\tisDrum ? 1 : 0\n\t\t);\n\t}\n\n\t/**\n\t * Set reverb parameters to the synthesizer.\n\t */\n\tpublic setReverb(\n\t\troomsize: number,\n\t\tdamping: number,\n\t\twidth: number,\n\t\tlevel: number\n\t) {\n\t\t_module._fluid_synth_set_reverb(\n\t\t\tthis._synth,\n\t\t\troomsize,\n\t\t\tdamping,\n\t\t\twidth,\n\t\t\tlevel\n\t\t);\n\t}\n\t/**\n\t * Set reverb roomsize parameter to the synthesizer.\n\t */\n\tpublic setReverbRoomsize(roomsize: number) {\n\t\t_module._fluid_synth_set_reverb_roomsize(this._synth, roomsize);\n\t}\n\t/**\n\t * Set reverb damping parameter to the synthesizer.\n\t */\n\tpublic setReverbDamp(damping: number) {\n\t\t_module._fluid_synth_set_reverb_damp(this._synth, damping);\n\t}\n\t/**\n\t * Set reverb width parameter to the synthesizer.\n\t */\n\tpublic setReverbWidth(width: number) {\n\t\t_module._fluid_synth_set_reverb_width(this._synth, width);\n\t}\n\t/**\n\t * Set reverb level to the synthesizer.\n\t */\n\tpublic setReverbLevel(level: number) {\n\t\t_module._fluid_synth_set_reverb_level(this._synth, level);\n\t}\n\t/**\n\t * Enable or disable reverb effect of the synthesizer.\n\t */\n\tpublic setReverbOn(on: boolean) {\n\t\t_module._fluid_synth_set_reverb_on(this._synth, on ? 1 : 0);\n\t}\n\t/**\n\t * Get reverb roomsize parameter of the synthesizer.\n\t */\n\tpublic getReverbRoomsize(): number {\n\t\treturn _module._fluid_synth_get_reverb_roomsize(this._synth);\n\t}\n\t/**\n\t * Get reverb damping parameter of the synthesizer.\n\t */\n\tpublic getReverbDamp(): number {\n\t\treturn _module._fluid_synth_get_reverb_damp(this._synth);\n\t}\n\t/**\n\t * Get reverb level of the synthesizer.\n\t */\n\tpublic getReverbLevel(): number {\n\t\treturn _module._fluid_synth_get_reverb_level(this._synth);\n\t}\n\t/**\n\t * Get reverb width parameter of the synthesizer.\n\t */\n\tpublic getReverbWidth(): number {\n\t\treturn _module._fluid_synth_get_reverb_width(this._synth);\n\t}\n\n\t/**\n\t * Set chorus parameters to the synthesizer.\n\t */\n\tpublic setChorus(\n\t\tvoiceCount: number,\n\t\tlevel: number,\n\t\tspeed: number,\n\t\tdepthMillisec: number,\n\t\ttype: ChorusModulation\n\t) {\n\t\t_module._fluid_synth_set_chorus(\n\t\t\tthis._synth,\n\t\t\tvoiceCount,\n\t\t\tlevel,\n\t\t\tspeed,\n\t\t\tdepthMillisec,\n\t\t\ttype\n\t\t);\n\t}\n\t/**\n\t * Set chorus voice count parameter to the synthesizer.\n\t */\n\tpublic setChorusVoiceCount(voiceCount: number) {\n\t\t_module._fluid_synth_set_chorus_nr(this._synth, voiceCount);\n\t}\n\t/**\n\t * Set chorus level parameter to the synthesizer.\n\t */\n\tpublic setChorusLevel(level: number) {\n\t\t_module._fluid_synth_set_chorus_level(this._synth, level);\n\t}\n\t/**\n\t * Set chorus speed parameter to the synthesizer.\n\t */\n\tpublic setChorusSpeed(speed: number) {\n\t\t_module._fluid_synth_set_chorus_speed(this._synth, speed);\n\t}\n\t/**\n\t * Set chorus depth parameter to the synthesizer.\n\t */\n\tpublic setChorusDepth(depthMillisec: number) {\n\t\t_module._fluid_synth_set_chorus_depth(this._synth, depthMillisec);\n\t}\n\t/**\n\t * Set chorus modulation type to the synthesizer.\n\t */\n\tpublic setChorusType(type: ChorusModulation) {\n\t\t_module._fluid_synth_set_chorus_type(this._synth, type);\n\t}\n\t/**\n\t * Enable or disable chorus effect of the synthesizer.\n\t */\n\tpublic setChorusOn(on: boolean) {\n\t\t_module._fluid_synth_set_chorus_on(this._synth, on ? 1 : 0);\n\t}\n\t/**\n\t * Get chorus voice count of the synthesizer.\n\t */\n\tpublic getChorusVoiceCount(): number {\n\t\treturn _module._fluid_synth_get_chorus_nr(this._synth);\n\t}\n\t/**\n\t * Get chorus level of the synthesizer.\n\t */\n\tpublic getChorusLevel(): number {\n\t\treturn _module._fluid_synth_get_chorus_level(this._synth);\n\t}\n\t/**\n\t * Get chorus speed of the synthesizer.\n\t */\n\tpublic getChorusSpeed(): number {\n\t\treturn _module._fluid_synth_get_chorus_speed(this._synth);\n\t}\n\t/**\n\t * Get chorus depth (in milliseconds) of the synthesizer.\n\t */\n\tpublic getChorusDepth(): number {\n\t\treturn _module._fluid_synth_get_chorus_depth(this._synth);\n\t}\n\t/**\n\t * Get chorus modulation type of the synthesizer.\n\t */\n\tpublic getChorusType(): ChorusModulation {\n\t\treturn _module._fluid_synth_get_chorus_type(this._synth);\n\t}\n\n\t/**\n\t * Get generator value assigned to the MIDI channel.\n\t * @param channel MIDI channel number\n\t * @param param generator ID\n\t * @return a value related to the generator\n\t */\n\tpublic getGenerator(channel: number, param: GeneratorTypes): number {\n\t\treturn _module._fluid_synth_get_gen(this._synth, channel, param);\n\t}\n\t/**\n\t * Set generator value assigned to the MIDI channel.\n\t * @param channel MIDI channel number\n\t * @param param generator ID\n\t * @param value a value related to the generator\n\t */\n\tpublic setGenerator(channel: number, param: GeneratorTypes, value: number) {\n\t\t_module._fluid_synth_set_gen(this._synth, channel, param, value);\n\t}\n\t/**\n\t * Return the current legato mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return legato mode\n\t */\n\tpublic getLegatoMode(channel: number) {\n\t\t_module._fluid_synth_get_legato_mode(\n\t\t\tthis._synth,\n\t\t\tchannel,\n\t\t\tthis._numPtr\n\t\t);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as LegatoMode;\n\t}\n\t/**\n\t * Set the current legato mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param mode legato mode\n\t */\n\tpublic setLegatoMode(channel: number, mode: LegatoMode) {\n\t\t_module._fluid_synth_set_legato_mode(this._synth, channel, mode);\n\t}\n\t/**\n\t * Return the current portamento mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return portamento mode\n\t */\n\tpublic getPortamentoMode(channel: number) {\n\t\t_module._fluid_synth_get_portamento_mode(\n\t\t\tthis._synth,\n\t\t\tchannel,\n\t\t\tthis._numPtr\n\t\t);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as PortamentoMode;\n\t}\n\t/**\n\t * Set the current portamento mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param mode portamento mode\n\t */\n\tpublic setPortamentoMode(channel: number, mode: PortamentoMode) {\n\t\t_module._fluid_synth_set_portamento_mode(this._synth, channel, mode);\n\t}\n\t/**\n\t * Return the current breath mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return breath mode (BreathFlags)\n\t */\n\tpublic getBreathMode(channel: number) {\n\t\t_module._fluid_synth_get_breath_mode(\n\t\t\tthis._synth,\n\t\t\tchannel,\n\t\t\tthis._numPtr\n\t\t);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as number;\n\t}\n\t/**\n\t * Set the current breath mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param flags breath mode flags (BreathFlags)\n\t */\n\tpublic setBreathMode(channel: number, flags: number) {\n\t\t_module._fluid_synth_set_breath_mode(this._synth, channel, flags);\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////\n\n\tpublic resetPlayer() {\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tthis._initPlayer();\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic closePlayer() {\n\t\tthis._closePlayer();\n\t}\n\n\t/** @internal */\n\tprivate _initPlayer() {\n\t\tthis._closePlayer();\n\n\t\tconst player = _module._new_fluid_player(this._synth);\n\t\tthis._player = player;\n\t\tif (player !== INVALID_POINTER) {\n\t\t\tif (this._fluidSynthCallback === null) {\n\t\t\t\t// hacky retrieve 'fluid_synth_handle_midi_event' callback pointer\n\t\t\t\t// * 'playback_callback' is filled with 'fluid_synth_handle_midi_event' by default.\n\t\t\t\t// * 'playback_userdata' is filled with the synthesizer pointer by default\n\t\t\t\tconst funcPtr: PointerType =\n\t\t\t\t\t_module.HEAPU32[((player as number) + 588) >> 2]; // _fluid_player_t::playback_callback\n\t\t\t\tconst synthPtr: SynthId =\n\t\t\t\t\t_module.HEAPU32[((player as number) + 592) >> 2]; // _fluid_player_t::playback_userdata\n\t\t\t\tif (synthPtr === this._synth) {\n\t\t\t\t\tthis._fluidSynthCallback = funcPtr;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"Out of memory\");\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate _closePlayer() {\n\t\tconst p = this._player;\n\t\tif (p === INVALID_POINTER) {\n\t\t\treturn;\n\t\t}\n\t\tthis.stopPlayer();\n\t\t_module._delete_fluid_player(p);\n\t\tthis._player = INVALID_POINTER;\n\t\tthis._playerCallbackPtr = null;\n\t}\n\n\tpublic isPlayerPlaying() {\n\t\tif (this._playerPlaying) {\n\t\t\tconst status = _module._fluid_player_get_status(this._player);\n\t\t\tif (status === 1 /*FLUID_PLAYER_PLAYING*/) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tthis.stopPlayer();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic addSMFDataToPlayer(bin: ArrayBuffer) {\n\t\tthis.ensurePlayerInitialized();\n\t\tconst len = bin.byteLength;\n\t\tconst mem = malloc(len);\n\t\t_module.HEAPU8.set(new Uint8Array(bin), mem);\n\t\tconst r: number = _module._fluid_player_add_mem(this._player, mem, len);\n\t\tfree(mem);\n\t\treturn r !== -1\n\t\t\t? Promise.resolve()\n\t\t\t: Promise.reject(new Error(fluid_synth_error!(this._synth)));\n\t}\n\n\tpublic playPlayer() {\n\t\tthis.ensurePlayerInitialized();\n\t\tif (this._playerPlaying) {\n\t\t\tthis.stopPlayer();\n\t\t}\n\n\t\tif (_module._fluid_player_play(this._player) === -1) {\n\t\t\treturn Promise.reject(new Error(fluid_synth_error!(this._synth)));\n\t\t}\n\t\tthis._playerPlaying = true;\n\t\tlet resolver = () => {};\n\t\tconst p = new Promise<void>((resolve) => {\n\t\t\tresolver = resolve;\n\t\t});\n\t\tthis._playerDefer = {\n\t\t\tpromise: p,\n\t\t\tresolve: resolver,\n\t\t};\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic stopPlayer() {\n\t\tconst p = this._player;\n\t\tif (p === INVALID_POINTER || !this._playerPlaying) {\n\t\t\treturn;\n\t\t}\n\t\t_module._fluid_player_stop(p);\n\t\t_module._fluid_player_join(p);\n\t\t_module._fluid_synth_all_sounds_off(this._synth, -1);\n\t\tif (this._playerDefer) {\n\t\t\tthis._playerDefer.resolve();\n\t\t\tthis._playerDefer = void 0;\n\t\t}\n\t\tthis._playerPlaying = false;\n\t}\n\n\tpublic retrievePlayerCurrentTick(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(\n\t\t\t_module._fluid_player_get_current_tick(this._player)\n\t\t);\n\t}\n\tpublic retrievePlayerTotalTicks(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(\n\t\t\t_module._fluid_player_get_total_ticks(this._player)\n\t\t);\n\t}\n\tpublic retrievePlayerBpm(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_bpm(this._player));\n\t}\n\tpublic retrievePlayerMIDITempo(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(\n\t\t\t_module._fluid_player_get_midi_tempo(this._player)\n\t\t);\n\t}\n\tpublic seekPlayer(ticks: number): void {\n\t\tthis.ensurePlayerInitialized();\n\t\t_module._fluid_player_seek(this._player, ticks);\n\t}\n\tpublic setPlayerLoop(loopTimes: number): void {\n\t\tthis.ensurePlayerInitialized();\n\t\t_module._fluid_player_set_loop(this._player, loopTimes);\n\t}\n\tpublic setPlayerTempo(tempoType: PlayerSetTempoType, tempo: number): void {\n\t\tthis.ensurePlayerInitialized();\n\t\t_module._fluid_player_set_tempo(this._player, tempoType, tempo);\n\t}\n\n\t/**\n\t * Hooks MIDI events sent by the player.\n\t * initPlayer() must be called before calling this method.\n\t * @param callback hook callback function, or null to unhook\n\t * @param param any additional data passed to the callback\n\t */\n\tpublic hookPlayerMIDIEvents(\n\t\tcallback: HookMIDIEventCallback | null,\n\t\tparam?: any\n\t) {\n\t\tthis.ensurePlayerInitialized();\n\n\t\tconst oldPtr = this._playerCallbackPtr;\n\t\tif (oldPtr === null && callback === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst newPtr =\n\t\t\t// if callback is specified, add function\n\t\t\tcallback !== null\n\t\t\t\t? _addFunction(\n\t\t\t\t\t\tmakeMIDIEventCallback(this, callback, param),\n\t\t\t\t\t\t\"iii\"\n\t\t\t\t  )\n\t\t\t\t: // if _fluidSynthCallback is filled, set null to use it for reset callback\n\t\t\t\t// if not, add function defaultMIDIEventCallback for reset\n\t\t\t\tthis._fluidSynthCallback !== null\n\t\t\t\t? null\n\t\t\t\t: _addFunction(defaultMIDIEventCallback, \"iii\");\n\t\t// the third parameter of 'fluid_player_set_playback_callback' should be 'fluid_synth_t*'\n\t\tif (oldPtr !== null && newPtr !== null) {\n\t\t\t// (using defaultMIDIEventCallback also comes here)\n\t\t\t_module._fluid_player_set_playback_callback(\n\t\t\t\tthis._player,\n\t\t\t\tnewPtr,\n\t\t\t\tthis._synth\n\t\t\t);\n\t\t\t_removeFunction(oldPtr);\n\t\t} else {\n\t\t\tif (newPtr === null) {\n\t\t\t\t// newPtr === null --> use _fluidSynthCallback\n\t\t\t\t_module._fluid_player_set_playback_callback(\n\t\t\t\t\tthis._player,\n\t\t\t\t\tthis._fluidSynthCallback!,\n\t\t\t\t\tthis._synth\n\t\t\t\t);\n\t\t\t\t_removeFunction(oldPtr!);\n\t\t\t} else {\n\t\t\t\t_module._fluid_player_set_playback_callback(\n\t\t\t\t\tthis._player,\n\t\t\t\t\tnewPtr,\n\t\t\t\t\tthis._synth\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._playerCallbackPtr = newPtr;\n\t}\n\n\t/** @internal */\n\tprivate ensureInitialized() {\n\t\tif (this._synth === INVALID_POINTER) {\n\t\t\tthrow new Error(\"Synthesizer is not initialized\");\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate ensurePlayerInitialized() {\n\t\tthis.ensureInitialized();\n\t\tif (this._player === INVALID_POINTER) {\n\t\t\tthis._initPlayer();\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate renderRaw(\n\t\tmemLeft: PointerType,\n\t\tmemRight: PointerType,\n\t\tframeCount: number\n\t) {\n\t\t_module._fluid_synth_write_float(\n\t\t\tthis._synth,\n\t\t\tframeCount,\n\t\t\tmemLeft,\n\t\t\t0,\n\t\t\t1,\n\t\t\tmemRight,\n\t\t\t0,\n\t\t\t1\n\t\t);\n\t}\n\n\t/** @internal */\n\tprivate flushFramesSync() {\n\t\tconst frameCount = 65536;\n\t\tconst size = 4 * frameCount;\n\t\tconst mem = malloc(size * 2);\n\t\tconst memLeft = mem;\n\t\tconst memRight = ((mem as number) + size) as PointerType;\n\t\twhile (this.isPlaying()) {\n\t\t\tthis.renderRaw(memLeft, memRight, frameCount);\n\t\t}\n\t\tfree(mem);\n\t}\n\n\t/** @internal */\n\tprivate flushFramesAsync() {\n\t\tif (!this.isPlaying()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst frameCount = 65536;\n\t\tconst size = 4 * frameCount;\n\t\tconst mem = malloc(size * 2);\n\t\tconst memLeft = mem;\n\t\tconst memRight = ((mem as number) + size) as PointerType;\n\t\tconst nextFrame =\n\t\t\ttypeof setTimeout !== \"undefined\"\n\t\t\t\t? () => {\n\t\t\t\t\t\treturn new Promise<void>((resolve) =>\n\t\t\t\t\t\t\tsetTimeout(resolve, 0)\n\t\t\t\t\t\t);\n\t\t\t\t  }\n\t\t\t\t: () => {\n\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t  };\n\t\tfunction head(): Promise<void> {\n\t\t\treturn nextFrame().then(tail);\n\t\t}\n\t\tconst self = this;\n\t\tfunction tail(): Promise<void> {\n\t\t\tif (!self.isPlaying()) {\n\t\t\t\tfree(mem);\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tself.renderRaw(memLeft, memRight, frameCount);\n\t\t\treturn head();\n\t\t}\n\t\treturn head();\n\t}\n\n\tpublic waitForPlayerStopped() {\n\t\treturn this._playerDefer\n\t\t\t? this._playerDefer.promise\n\t\t\t: Promise.resolve();\n\t}\n\n\t/**\n\t * Create the sequencer object for this class.\n\t */\n\tpublic static createSequencer(): Promise<ISequencer> {\n\t\tbindFunctions();\n\t\tconst seq = new Sequencer();\n\t\treturn seq._initialize().then(() => seq);\n\t}\n\n\t/**\n\t * Registers the user-defined client to the sequencer.\n\t * The client can receive events in the time from sequencer process.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param name the client name\n\t * @param callback the client callback function that processes event data\n\t * @param param additional parameter passed to the callback\n\t * @return registered sequencer client id (can be passed to seq.unregisterClient())\n\t */\n\tpublic static registerSequencerClient(\n\t\tseq: ISequencer,\n\t\tname: string,\n\t\tcallback: SequencerClientCallback,\n\t\tparam: number\n\t): number {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError(\"Invalid sequencer instance\");\n\t\t}\n\t\tconst ptr = _addFunction(\n\t\t\t(time: number, ev: PointerType, _seq: number, data: number) => {\n\t\t\t\tconst e = new SequencerEventData(ev, _module);\n\t\t\t\tconst type: SequencerEventType =\n\t\t\t\t\t_module._fluid_event_get_type(ev);\n\t\t\t\tcallback(time, type, e, seq, data);\n\t\t\t},\n\t\t\t\"viiii\"\n\t\t);\n\t\tconst r = fluid_sequencer_register_client(\n\t\t\tseq.getRaw(),\n\t\t\tname,\n\t\t\tptr,\n\t\t\tparam\n\t\t);\n\t\tif (r !== -1) {\n\t\t\tseq._clientFuncMap[r] = ptr;\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t * Send sequencer event immediately to the specific client.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param clientId registered client id (-1 for registered synthesizer)\n\t * @param event event data\n\t */\n\tpublic static sendEventToClientNow(\n\t\tseq: ISequencer,\n\t\tclientId: number,\n\t\tevent: SequencerEvent\n\t): void {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError(\"Invalid sequencer instance\");\n\t\t}\n\t\tseq.sendEventToClientNow(clientId, event);\n\t}\n\t/**\n\t * (Re-)send event data immediately.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param clientId registered client id (-1 for registered synthesizer)\n\t * @param eventData event data which can be retrieved in SequencerClientCallback\n\t */\n\tpublic static sendEventNow(\n\t\tseq: ISequencer,\n\t\tclientId: number,\n\t\teventData: ISequencerEventData\n\t): void {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError(\"Invalid sequencer instance\");\n\t\t}\n\t\tseq.sendEventNow(clientId, eventData);\n\t}\n\t/**\n\t * Set interval timer process to call processSequencer for this sequencer.\n\t * This method uses 'setInterval' global method to register timer.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param msec time in milliseconds passed to both setInterval and processSequencer\n\t * @return return value of 'setInterval' (usually passing to 'clearInterval' will reset event)\n\t */\n\tpublic static setIntervalForSequencer(seq: ISequencer, msec: number) {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError(\"Invalid sequencer instance\");\n\t\t}\n\t\treturn seq.setIntervalForSequencer(msec);\n\t}\n}\n","\n/** Error object used for errors occurred in the message receiver (e.g. Worklet) */\nexport default class MessageError extends Error {\n\t/** The name of original error object if available */\n\tpublic baseName: any;\n\t/** Detailed properties of original error object if available */\n\tpublic detail: any;\n\n\tconstructor(baseName: string, message: string, detail?: any) {\n\t\tsuper(message);\n\t\tthis.baseName = baseName;\n\t\tthis.detail = detail;\n\t\tif (detail && detail.stack) {\n\t\t\tthis.stack = detail.stack;\n\t\t}\n\t}\n}\n","\nimport MessageError from './MessageError';\n\nexport interface MethodCallEventData {\n\tid: number;\n\tmethod: string;\n\targs: any[];\n}\n\nexport interface MethodReturnEventData {\n\tid: number;\n\tmethod: string;\n\tval: any;\n\terror?: MessageErrorData;\n}\n\nexport interface MessageErrorData {\n\tbaseName: string;\n\tmessage: string;\n\tdetail: any;\n}\n\n/** @internal */\nexport interface Defer<T> {\n\tresolve(value: T): void;\n\treject(reason: any): void;\n}\n\n/** @internal */\nexport interface DeferMap {\n\t[id: number]: Defer<any>;\n}\n\n/** @internal */\nexport type HookReturnMessageCallback = (data: MethodReturnEventData) => boolean;\n\n/** @internal */\nexport interface CallMessageInstance {\n\tport: MessagePort;\n\tdefers: DeferMap;\n\tdeferId: number;\n}\n\n/** @internal */\nexport function initializeCallPort(\n\tport: MessagePort,\n\thookMessage?: HookReturnMessageCallback | undefined\n): CallMessageInstance {\n\tconst instance: CallMessageInstance = {\n\t\tport: port,\n\t\tdefers: {},\n\t\tdeferId: 0\n\t};\n\tport.addEventListener('message', (e) => processReturnMessage(instance.defers, hookMessage, e));\n\tport.start();\n\treturn instance;\n}\n\nfunction convertErrorTransferable(err: Error): MessageErrorData {\n\tconst result: any = {};\n\tconst objList: any[] = [];\n\tlet obj: any = err;\n\twhile (obj && obj !== Object.prototype) {\n\t\tobjList.unshift(obj);\n\t\tobj = Object.getPrototypeOf(obj);\n\t}\n\tobjList.forEach((o) => {\n\t\tObject.getOwnPropertyNames(o).forEach((key) => {\n\t\t\ttry {\n\t\t\t\tconst data = (err as any)[key];\n\t\t\t\tif (typeof data !== 'function' && typeof data !== 'symbol') {\n\t\t\t\t\tresult[key] = data;\n\t\t\t\t}\n\t\t\t} catch (_e) { }\n\t\t});\n\t});\n\treturn {\n\t\tbaseName: err.name,\n\t\tmessage: err.message,\n\t\tdetail: result\n\t};\n}\n\nfunction convertAnyErrorTransferable(err: any): MessageErrorData {\n\treturn convertErrorTransferable((err && err instanceof Error) ? err : new Error(`${err}`));\n}\n\nfunction makeMessageError(error: MessageErrorData): MessageError {\n\treturn new MessageError(error.baseName, error.message, error.detail);\n}\n\nfunction processReturnMessage(defers: DeferMap, hook: HookReturnMessageCallback | undefined, e: MessageEvent) {\n\tconst data: MethodReturnEventData = e.data;\n\tif (!data) {\n\t\treturn;\n\t}\n\tif (hook && hook(data)) {\n\t\treturn;\n\t}\n\tconst defer = defers[data.id];\n\tif (defer) {\n\t\tdelete defers[data.id];\n\t\tif (data.error) {\n\t\t\tdefer.reject(makeMessageError(data.error));\n\t\t} else {\n\t\t\tdefer.resolve(data.val);\n\t\t}\n\t} else {\n\t\tif (data.error) {\n\t\t\tthrow makeMessageError(data.error);\n\t\t}\n\t}\n}\n\n/** @internal */\nexport function postCall(instance: CallMessageInstance, method: string, args: any[]): void;\n\n/** @internal */\nexport function postCall({ port }: CallMessageInstance, method: string, args: any[]) {\n\tport.postMessage({\n\t\tid: -1, method, args\n\t} as MethodCallEventData);\n}\n\n/** @internal */\nexport function postCallWithPromise<T>(instance: CallMessageInstance, method: string, args: any[]): Promise<T> {\n\tconst id = instance.deferId++;\n\tif (instance.deferId === Infinity || instance.deferId < 0) {\n\t\tinstance.deferId = 0;\n\t}\n\tconst promise = new Promise<T>((resolve, reject) => {\n\t\tinstance.defers[id] = { resolve, reject };\n\t});\n\tconst transfers: Transferable[] = [];\n\tif (args[0] instanceof MessagePort) {\n\t\ttransfers.push(args[0]);\n\t}\n\tinstance.port.postMessage({\n\t\tid, method, args\n\t} as MethodCallEventData, transfers);\n\treturn promise;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport type HookCallMessageCallback = (data: MethodCallEventData) => boolean;\n\n/** @internal */\nexport interface ReturnMessageInstance {\n\tport: MessagePort;\n}\n\n/** @internal */\nexport function initializeReturnPort(\n\tport: MessagePort,\n\tpromiseInitialized: Promise<void> | null,\n\ttargetObjectHolder: () => any,\n\thookMessage?: HookCallMessageCallback | undefined\n): ReturnMessageInstance {\n\tconst instance: ReturnMessageInstance = {\n\t\tport: port\n\t};\n\tif (promiseInitialized) {\n\t\tport.addEventListener('message', (e) => {\n\t\t\tconst data = e.data;\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpromiseInitialized.then(() => processCallMessage(instance.port, data, targetObjectHolder, hookMessage));\n\t\t});\n\t} else {\n\t\tport.addEventListener('message', (e) => {\n\t\t\tconst data = e.data;\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprocessCallMessage(instance.port, data, targetObjectHolder, hookMessage);\n\t\t});\n\t}\n\tport.start();\n\treturn instance;\n}\n\nfunction processCallMessage(\n\tport: MessagePort,\n\tdata: MethodCallEventData,\n\ttargetObjectHolder: () => any,\n\thook?: HookCallMessageCallback | undefined\n) {\n\tif (hook && hook(data)) {\n\t\treturn;\n\t}\n\tconst target = targetObjectHolder();\n\tif (!target[data.method]) {\n\t\tpostReturnErrorImpl(port, data.id, data.method, new Error('Not implemented'));\n\t} else {\n\t\ttry {\n\t\t\tpostReturnImpl(port, data.id, data.method, target[data.method].apply(target, data.args));\n\t\t} catch (e) {\n\t\t\tpostReturnErrorImpl(port, data.id, data.method, e);\n\t\t}\n\t}\n}\n\n/** @internal */\nexport function postReturn(instance: ReturnMessageInstance, id: number, method: string, value: any) {\n\tpostReturnImpl(instance.port, id, method, value);\n}\n\nfunction postReturnImpl(port: MessagePort, id: number, method: string, value: any) {\n\tif (value instanceof Promise) {\n\t\tvalue.then((v) => {\n\t\t\tif (id >= 0) {\n\t\t\t\tport.postMessage({\n\t\t\t\t\tid,\n\t\t\t\t\tmethod,\n\t\t\t\t\tval: v\n\t\t\t\t} as MethodReturnEventData);\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tport.postMessage({\n\t\t\t\tid,\n\t\t\t\tmethod,\n\t\t\t\terror: convertAnyErrorTransferable(error)\n\t\t\t} as MethodReturnEventData);\n\t\t});\n\t} else {\n\t\tport.postMessage({\n\t\t\tid,\n\t\t\tmethod,\n\t\t\tval: value\n\t\t} as MethodReturnEventData);\n\t}\n}\n\n/** @internal */\nexport function postReturnError(instance: ReturnMessageInstance, id: number, method: string, error: any) {\n\tpostReturnErrorImpl(instance.port, id, method, error);\n}\n\nfunction postReturnErrorImpl(port: MessagePort, id: number, method: string, error: any) {\n\tport.postMessage({\n\t\tid,\n\t\tmethod,\n\t\terror: convertAnyErrorTransferable(error)\n\t} as MethodReturnEventData);\n}\n","\nimport Sequencer from './Sequencer';\nimport Synthesizer from './Synthesizer';\nimport SynthesizerSettings from './SynthesizerSettings';\nimport waitForReady from './waitForReady';\n\nimport {\n\tConstants,\n\tProcessorOptions,\n\tSynthesizerStatus\n} from './AudioWorkletNodeSynthesizer';\n\nimport {\n\tinitializeReturnPort,\n\tMethodCallEventData,\n\tpostReturn,\n\tpostReturnError,\n    ReturnMessageInstance\n} from './MethodMessaging';\nimport { disableLogging } from './logging';\n\nconst promiseWasmInitialized = waitForReady();\n\n/** Registers processor using Synthesizer for AudioWorklet. */\nexport default function registerAudioWorkletProcessor() {\n\t/**\n\t * The processor using Synthesizer\n\t */\n\tclass Processor extends AudioWorkletProcessor {\n\n\t\tprivate synth: Synthesizer | undefined;\n\t\tprivate _messaging: ReturnMessageInstance;\n\n\t\tconstructor(options: AudioWorkletNodeOptions) {\n\t\t\tsuper(options);\n\n\t\t\tconst processorOptions: ProcessorOptions | undefined = options.processorOptions;\n\t\t\tconst settings: SynthesizerSettings | undefined =\n\t\t\t\tprocessorOptions && processorOptions.settings;\n\t\t\tif (processorOptions && processorOptions.disabledLoggingLevel) {\n\t\t\t\tdisableLogging(processorOptions.disabledLoggingLevel);\n\t\t\t}\n\n\t\t\tconst promiseInitialized = this.doInit(settings);\n\t\t\tthis._messaging = initializeReturnPort(this.port, promiseInitialized, () => this.synth!, (data) => {\n\t\t\t\tswitch (data.method) {\n\t\t\t\t\tcase 'init':\n\t\t\t\t\t\tthis.synth!.init(sampleRate, settings);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'createSequencer':\n\t\t\t\t\t\tthis.doCreateSequencer(data.args[0]).then(() => {\n\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'hookPlayerMIDIEventsByName':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst r = this.doHookPlayerMIDIEvents(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, new Error('Name not found'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'callFunction':\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.doCallFunction(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'getSFontObject':\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst name = this.doGetSFontObject(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tif (name !== null) {\n\t\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, name);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, new Error('Invalid sfontId'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'playPlayer':\n\t\t\t\t\t\tthis.doPlayPlayer(data);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'loggingChanged':\n\t\t\t\t\t\tdisableLogging(data.args[0]);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\tprivate async doInit(settings?: SynthesizerSettings | undefined) {\n\t\t\tawait promiseWasmInitialized;\n\t\t\tthis.synth = new Synthesizer();\n\t\t\tthis.synth.init(sampleRate, settings);\n\t\t}\n\n\t\tprivate doCreateSequencer(port: MessagePort): Promise<void> {\n\t\t\treturn Synthesizer.createSequencer().then((seq) => {\n\t\t\t\tconst messaging = initializeReturnPort(port, null, () => seq, (data) => {\n\t\t\t\t\t// special handle for Sequencer\n\t\t\t\t\tif (data.method === 'getRaw') {\n\t\t\t\t\t\tpostReturn(messaging, data.id, data.method, (seq as Sequencer).getRaw());\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (data.method === 'registerSequencerClientByName') {\n\t\t\t\t\t\tconst r = this.doRegisterSequencerClient(seq as Sequencer, data.args[0], data.args[1], data.args[2]);\n\t\t\t\t\t\tif (r !== null) {\n\t\t\t\t\t\t\tpostReturn(messaging, data.id, data.method, r);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpostReturnError(messaging, data.id, data.method, new Error('Name not found'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tprivate doGetSFontObject(port: MessagePort, sfontId: number): string | null {\n\t\t\tconst sfont = this.synth!.getSFontObject(sfontId);\n\t\t\tif (sfont === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst messaging = initializeReturnPort(port, null, () => sfont, (data) => {\n\t\t\t\tif (data.method === 'getPresetIterable') {\n\t\t\t\t\tpostReturn(messaging, data.id, data.method, [...sfont.getPresetIterable()]);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\treturn sfont.getName();\n\t\t}\n\n\t\tprivate doPlayPlayer(data: MethodCallEventData) {\n\t\t\tconst syn = this.synth!;\n\t\t\tsyn.playPlayer().then(() => {\n\t\t\t\tpostReturn(this._messaging, -1, Constants.UpdateStatus, {\n\t\t\t\t\tplaying: syn.isPlaying(),\n\t\t\t\t\tplayerPlaying: syn.isPlayerPlaying()\n\t\t\t\t} as SynthesizerStatus);\n\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t}, (e: unknown) => {\n\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t})\n\t\t}\n\n\t\tprivate doHookPlayerMIDIEvents(name: string | null | undefined, param: any) {\n\t\t\tif (!name) {\n\t\t\t\tthis.synth!.hookPlayerMIDIEvents(null);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[name]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\tthis.synth!.hookPlayerMIDIEvents(fn, param);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate doCallFunction(name: string, param: any) {\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[name]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\tfn.call(null, this.synth, param);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new Error('Name not found');\n\t\t}\n\n\t\tprivate doRegisterSequencerClient(seq: Sequencer, clientName: string, callbackName: string, param: number) {\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[callbackName]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\treturn Synthesizer.registerSequencerClient(seq, clientName, fn, param);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic process(_inputs: Float32Array[][], outputs: Float32Array[][]) {\n\t\t\tif (!this.synth) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst syn = this.synth!;\n\t\t\tsyn.render(outputs[0]);\n\t\t\tpostReturn(this._messaging, -1, Constants.UpdateStatus, {\n\t\t\t\tplaying: syn.isPlaying(),\n\t\t\t\tplayerPlaying: syn.isPlayerPlaying()\n\t\t\t} as SynthesizerStatus);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tregisterProcessor(Constants.ProcessorName, Processor);\n}\n","import Synthesizer from './Synthesizer';\n\n/**\n * Returns the Promise object which resolves when the synthesizer engine is ready.\n */\nexport default function waitForReady(): Promise<void> {\n\treturn Synthesizer.waitForWasmInitialized();\n}\n","\nimport registerAudioWorkletProcessor from './registerAudioWorkletProcessor';\n\nimport { rewriteEventData } from './ISequencerEventData';\nimport Synthesizer from './Synthesizer';\nimport { disableLogging, restoreLogging } from './logging';\n\nAudioWorkletGlobalScope.JSSynth = {\n\trewriteEventData: rewriteEventData,\n\tSynthesizer: Synthesizer,\n\tdisableLogging: disableLogging,\n\trestoreLogging: restoreLogging,\n};\n// deprecated\nAudioWorkletGlobalScope.Fluid = AudioWorkletGlobalScope.JSSynth;\n\nregisterAudioWorkletProcessor();\n"],"names":["_module","_addFunction","_removeFunction","_fs","_addOnPostRunFn","fluid_settings_setint","fluid_settings_setnum","fluid_settings_setstr","fluid_synth_error","fluid_synth_sfload","fluid_sequencer_register_client","malloc","free","defaultMIDIEventCallback","promiseWaitForInitialized","bindFunctions","module","addFunction","removeFunction","addOnPostRun","Error","AudioWorkletGlobalScope","wasmModule","wasmAddFunction","wasmRemoveFunction","Module","undefined","FS","cwrap","_malloc","bind","_free","_fluid_synth_handle_midi_event","MIDIEvent","constructor","_ptr","getType","this","_fluid_midi_event_get_type","setType","value","_fluid_midi_event_set_type","getChannel","_fluid_midi_event_get_channel","setChannel","_fluid_midi_event_set_channel","getKey","_fluid_midi_event_get_key","setKey","_fluid_midi_event_set_key","getVelocity","_fluid_midi_event_get_velocity","setVelocity","_fluid_midi_event_set_velocity","getControl","_fluid_midi_event_get_control","setControl","_fluid_midi_event_set_control","getValue","_fluid_midi_event_get_value","setValue","_fluid_midi_event_set_value","getProgram","_fluid_midi_event_get_program","setProgram","_fluid_midi_event_set_program","getPitch","_fluid_midi_event_get_pitch","setPitch","_fluid_midi_event_set_pitch","setSysEx","data","size","byteLength","ptr","Uint8Array","HEAPU8","buffer","set","_fluid_midi_event_set_sysex","setText","_fluid_midi_event_set_text","setLyrics","_fluid_midi_event_set_lyrics","SequencerEventData","getRaw","dispose","_fluid_event_get_type","getSource","_fluid_event_get_source","getDest","_fluid_event_get_dest","_fluid_event_get_channel","_fluid_event_get_key","_fluid_event_get_velocity","_fluid_event_get_control","_fluid_event_get_value","_fluid_event_get_program","getData","_fluid_event_get_data","getDuration","_fluid_event_get_duration","getBank","_fluid_event_get_bank","_fluid_event_get_pitch","getSFontId","_fluid_event_get_sfont_id","rewriteEventDataImpl","ev","event","type","_fluid_event_note","channel","key","vel","duration","_fluid_event_noteon","_fluid_event_noteoff","_fluid_event_all_sounds_off","_fluid_event_all_notes_off","_fluid_event_bank_select","bank","_fluid_event_program_change","preset","_fluid_event_program_select","sfontId","_fluid_event_control_change","control","_fluid_event_pitch_bend","_fluid_event_pitch_wheelsens","_fluid_event_modulation","_fluid_event_sustain","_fluid_event_pan","_fluid_event_volume","_fluid_event_reverb_send","_fluid_event_chorus_send","_fluid_event_key_pressure","_fluid_event_channel_pressure","_fluid_event_system_reset","_fluid_event_timer","fluid_sequencer_get_client_name","bound","makeEvent","_new_fluid_event","_delete_fluid_event","Sequencer","_seq","_seqId","_clientFuncMap","_initialize","close","_new_fluid_sequencer2","Promise","resolve","Object","keys","forEach","clientIdStr","unregisterClient","Number","_delete_fluid_sequencer","registerSynthesizer","synth","val","_fluid_sequencer_unregister_client","Synthesizer","reject","TypeError","getRawSynthesizer","_fluid_sequencer_register_fluidsynth","clientId","_fluid_event_set_source","_fluid_event_set_dest","_fluid_event_unregistering","_fluid_sequencer_send_now","map","getAllRegisteredClients","c","_fluid_sequencer_count_clients","r","i","id","_fluid_sequencer_get_client_id","name","push","getClientCount","getClientInfo","index","setTimeScale","scale","_fluid_sequencer_set_time_scale","getTimeScale","_fluid_sequencer_get_time_scale","getTick","_fluid_sequencer_get_tick","sendEventAt","tick","isAbsolute","count","_fluid_sequencer_send_at","sendEventToClientAt","sendEventToClientNow","sendEventNow","eventData","removeAllEvents","_fluid_sequencer_remove_events","removeAllEventsFromClient","processSequencer","msecToProcess","_fluid_sequencer_process","setIntervalForSequencer","msec","setInterval","fluid_sfont_get_name","fluid_preset_get_name","_ptrDefaultLogFunction","Soundfont","sfontPtr","getSoundfontById","sfont","_fluid_synth_get_sfont_by_id","getName","getPreset","presetNum","presetPtr","_fluid_sfont_get_preset","soundfont","bankNum","_fluid_preset_get_banknum","num","_fluid_preset_get_num","getPresetIterable","reset","_fluid_sfont_iteration_start","next","_fluid_sfont_iteration_next","done","Symbol","iterator","setBoolValueForSettings","settings","setIntValueForSettings","setNumValueForSettings","_settings","_synth","_player","_playerPlaying","_playerCallbackPtr","_fluidSynthCallback","_buffer","_bufferSize","_numPtr","_gain","initializeWithFluidSynthModule","mod","waitForWasmInitialized","e","calledRun","fn","onRuntimeInitialized","waitForInitialized","isInitialized","createAudioNode","context","frameSize","node","createScriptProcessor","addEventListener","render","outputBuffer","init","sampleRate","_new_fluid_settings","initialGain","chorusActive","chorusDepth","chorusLevel","chorusNr","chorusSpeed","midiChannelCount","setStrValueForSettings","midiBankSelect","minNoteLength","overflowAge","overflowImportantValue","overflowImportantChannels","join","overflowPercussion","overflowReleased","overflowSustained","overflowVolume","polyphony","reverbActive","reverbDamp","reverbLevel","reverbRoomSize","reverbWidth","_new_fluid_synth","_closePlayer","_delete_fluid_synth","_delete_fluid_settings","isPlaying","actualCount","_fluid_synth_get_active_voice_count","baseOffsetOfVoice","offsetOfActiveVoiceCount","structActiveVoiceCount","HEAPU32","console","warn","voiceList","voiceCount","_fluid_synth_get_polyphony","isRunning","voice","getActiveVoiceCount","setInterpolation","ensureInitialized","_fluid_synth_set_interp_method","getGain","setGain","gain","_fluid_synth_set_gain","_fluid_synth_get_gain","setChannelType","isDrum","_fluid_synth_set_channel_type","waitForVoicesStopped","flushFramesAsync","loadSFont","bin","ext","Math","random","ub","writeFile","unlink","unloadSFont","stopPlayer","flushFramesSync","_fluid_synth_sfunload","unloadSFontAsync","then","getSFontObject","getSFontBankOffset","_fluid_synth_get_bank_offset","setSFontBankOffset","offset","_fluid_synth_set_bank_offset","outBuffer","frameCount","length","channels","numberOfChannels","sizePerChannel","totalSize","memLeft","memRight","renderRaw","aLeft","Float32Array","aRight","copyToChannel","leftData","getChannelData","rightData","isPlayerPlaying","midiNoteOn","chan","_fluid_synth_noteon","midiNoteOff","_fluid_synth_noteoff","midiKeyPressure","_fluid_synth_key_pressure","midiControl","ctrl","_fluid_synth_cc","midiProgramChange","prognum","_fluid_synth_program_change","midiChannelPressure","_fluid_synth_channel_pressure","midiPitchBend","_fluid_synth_pitch_bend","midiSysEx","len","mem","_fluid_synth_sysex","midiPitchWheelSensitivity","_fluid_synth_pitch_wheel_sens","_fluid_synth_bank_select","midiSFontSelect","_fluid_synth_sfont_select","midiProgramSelect","_fluid_synth_program_select","midiUnsetProgram","_fluid_synth_unset_program","midiProgramReset","_fluid_synth_program_reset","midiSystemReset","_fluid_synth_system_reset","midiAllNotesOff","_fluid_synth_all_notes_off","midiAllSoundsOff","_fluid_synth_all_sounds_off","midiSetChannelType","setReverb","roomsize","damping","width","level","_fluid_synth_set_reverb","setReverbRoomsize","_fluid_synth_set_reverb_roomsize","setReverbDamp","_fluid_synth_set_reverb_damp","setReverbWidth","_fluid_synth_set_reverb_width","setReverbLevel","_fluid_synth_set_reverb_level","setReverbOn","on","_fluid_synth_set_reverb_on","getReverbRoomsize","_fluid_synth_get_reverb_roomsize","getReverbDamp","_fluid_synth_get_reverb_damp","getReverbLevel","_fluid_synth_get_reverb_level","getReverbWidth","_fluid_synth_get_reverb_width","setChorus","speed","depthMillisec","_fluid_synth_set_chorus","setChorusVoiceCount","_fluid_synth_set_chorus_nr","setChorusLevel","_fluid_synth_set_chorus_level","setChorusSpeed","_fluid_synth_set_chorus_speed","setChorusDepth","_fluid_synth_set_chorus_depth","setChorusType","_fluid_synth_set_chorus_type","setChorusOn","_fluid_synth_set_chorus_on","getChorusVoiceCount","_fluid_synth_get_chorus_nr","getChorusLevel","_fluid_synth_get_chorus_level","getChorusSpeed","_fluid_synth_get_chorus_speed","getChorusDepth","_fluid_synth_get_chorus_depth","getChorusType","_fluid_synth_get_chorus_type","getGenerator","param","_fluid_synth_get_gen","setGenerator","_fluid_synth_set_gen","getLegatoMode","_fluid_synth_get_legato_mode","HEAP32","setLegatoMode","mode","_fluid_synth_set_legato_mode","getPortamentoMode","_fluid_synth_get_portamento_mode","setPortamentoMode","_fluid_synth_set_portamento_mode","getBreathMode","_fluid_synth_get_breath_mode","setBreathMode","flags","_fluid_synth_set_breath_mode","resetPlayer","_initPlayer","closePlayer","player","_new_fluid_player","funcPtr","p","_delete_fluid_player","_fluid_player_get_status","addSMFDataToPlayer","ensurePlayerInitialized","_fluid_player_add_mem","playPlayer","_fluid_player_play","resolver","_playerDefer","promise","_fluid_player_stop","_fluid_player_join","retrievePlayerCurrentTick","_fluid_player_get_current_tick","retrievePlayerTotalTicks","_fluid_player_get_total_ticks","retrievePlayerBpm","_fluid_player_get_bpm","retrievePlayerMIDITempo","_fluid_player_get_midi_tempo","seekPlayer","ticks","_fluid_player_seek","setPlayerLoop","loopTimes","_fluid_player_set_loop","setPlayerTempo","tempoType","tempo","_fluid_player_set_tempo","hookPlayerMIDIEvents","callback","oldPtr","newPtr","cb","t","makeMIDIEventCallback","_fluid_player_set_playback_callback","_fluid_synth_write_float","nextFrame","setTimeout","head","tail","self","waitForPlayerStopped","createSequencer","seq","registerSequencerClient","time","convertAnyErrorTransferable","err","result","objList","obj","prototype","unshift","getPrototypeOf","o","getOwnPropertyNames","_e","baseName","message","detail","convertErrorTransferable","initializeReturnPort","port","promiseInitialized","targetObjectHolder","hookMessage","instance","processCallMessage","start","hook","target","method","postReturnImpl","apply","args","postReturnErrorImpl","postReturn","v","postMessage","error","postReturnError","_disabledLoggingLevel","_handlers","LogLevel","disableLogging","_fluid_set_log_function","l","promiseWasmInitialized","JSSynth","rewriteEventData","restoreLogging","Fluid","Processor","AudioWorkletProcessor","options","super","processorOptions","disabledLoggingLevel","doInit","_messaging","doCreateSequencer","doHookPlayerMIDIEvents","doCallFunction","doGetSFontObject","doPlayPlayer","messaging","doRegisterSequencerClient","syn","playing","playerPlaying","call","clientName","callbackName","process","_inputs","outputs","registerProcessor","registerAudioWorkletProcessor"],"sourceRoot":""}